{"!name":"sap.ui.layout","!version":"1.18.0","!define":{"sap.ui.layout.form.FormContainer":{"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"addFormElement":{"!description":"Adds some formElement to the aggregation <code>formElements<\/code>.","!static":false,"!category":"function","!type":"fn(oFormElement: sap.ui.layout.form.FormElement) -> sap.ui.layout.form.FormContainer","parameters":{"oFormElement":"type: sap.ui.layout.form.FormElement, description: the formElement to add; if empty, nothing is inserted"}},"setExpanded":{"!description":"Sets a new value for property <code>expanded<\/code>.\r\rContainer is expanded.\n\n<b>Note:<\/b> This property only works if <code>expandable<\/code> is set to <code>true<\/code>.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bExpanded: Boolean) -> sap.ui.layout.form.FormContainer","parameters":{"bExpanded":"type: boolean, description: New value for property <code>expanded<\/code>"}},"getFormElements":{"!description":"Gets content of aggregation <code>formElements<\/code>.\r\rThe <code>FormElements<\/code> contain the content (labels and fields) of the <code>FormContainers<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.layout.form.FormElement]"},"insertFormElement":{"!description":"Inserts a formElement into the aggregation <code>formElements<\/code>.","!static":false,"!category":"function","!type":"fn(oFormElement: sap.ui.layout.form.FormElement, iIndex: Number) -> sap.ui.layout.form.FormContainer","parameters":{"oFormElement":"type: sap.ui.layout.form.FormElement, description: the formElement to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the formElement should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the formElement is inserted at position 0; for a value\r             greater than the current size of the aggregation, the formElement is inserted at\r             the last position"}},"!proto":"sap.ui.core.Element","!category":"class","!constructorDescription":"Constructor for a new sap.ui.layout.form.FormContainer.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getExpanded expanded} : boolean (default: true)<\/li>\n<li>{@link #getExpandable expandable} : boolean (default: false)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getFormElements formElements} : sap.ui.layout.form.FormElement[] (default)<\/li>\n<li>{@link #getTitle title} : sap.ui.core.Title|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.layout.form.FormContainer","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: the ariaLabelledBy to add; if empty, nothing is inserted"}},"getTitle":{"!description":"Gets content of aggregation <code>title<\/code>.\r\rTitle of the <code>FormContainer<\/code>. Can either be a <code>Title<\/code> element or a string.\nIf a <code>Title<\/code> element is used, the style of the title can be set.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Title | String"},"getExpandable":{"!description":"Gets current value of property <code>expandable<\/code>.\r\rDefines if the <code>FormContainer<\/code> is expandable.\n\n<b>Note:<\/b> The expander icon will only be shown if a <code>title<\/code> is set for the <code>FormContainer<\/code>.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getToolbar":{"!description":"Gets content of aggregation <code>toolbar<\/code>.\r\rToolbar of the <code>FormContainer<\/code>.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored.\nIf a title is needed inside the <code>Toolbar<\/code> it must be added at content to the <code>Toolbar<\/code>.\nIn this case add the <code>Title<\/code> to the <code>ariaLabelledBy<\/code> association.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Toolbar"},"!description":"A <code>FormContainer<\/code> represents a group inside a <code>Form<\/code>. It consists of <code>FormElements<\/code>.\nThe rendering of the <code>FormContainer<\/code> is done by the <code>FormLayout<\/code> assigned to the <code>Form<\/code>.","setExpandable":{"!description":"Sets a new value for property <code>expandable<\/code>.\r\rDefines if the <code>FormContainer<\/code> is expandable.\n\n<b>Note:<\/b> The expander icon will only be shown if a <code>title<\/code> is set for the <code>FormContainer<\/code>.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bExpandable: Boolean) -> sap.ui.layout.form.FormContainer","parameters":{"bExpandable":"type: boolean, description: New value for property <code>expandable<\/code>"}},"setVisible":{"!description":"Sets a new value for property <code>visible<\/code>.\r\rIf set to <code>false<\/code>, the <code>FormContainer<\/code> is not rendered.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisible: Boolean) -> sap.ui.layout.form.FormContainer","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"}},"removeAllFormElements":{"!description":"Removes all the controls from the aggregation <code>formElements<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.layout.form.FormElement]"},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.FormContainer.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getVisible":{"!description":"Gets current value of property <code>visible<\/code>.\r\rIf set to <code>false<\/code>, the <code>FormContainer<\/code> is not rendered.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setTitle":{"!description":"Sets the aggregated <code>title<\/code>.","!static":false,"!category":"function","!type":"fn(vTitle: sap.ui.core.Title | String) -> sap.ui.layout.form.FormContainer","parameters":{"vTitle":"type: sap.ui.core.Title|string, description: The title to set"}},"getExpanded":{"!description":"Gets current value of property <code>expanded<\/code>.\r\rContainer is expanded.\n\n<b>Note:<\/b> This property only works if <code>expandable<\/code> is set to <code>true<\/code>.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"indexOfFormElement":{"!description":"Checks for the provided <code>sap.ui.layout.form.FormElement<\/code> in the aggregation <code>formElements<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oFormElement: sap.ui.layout.form.FormElement) -> Number","parameters":{"oFormElement":"type: sap.ui.layout.form.FormElement, description: The formElement whose index is looked for"}},"removeFormElement":{"!description":"Removes a formElement from the aggregation <code>formElements<\/code>.","!static":false,"!category":"function","!type":"fn(vFormElement: Number | String | sap.ui.layout.form.FormElement) -> sap.ui.layout.form.FormElement","parameters":{"vFormElement":"type: int|string|sap.ui.layout.form.FormElement, description: The formElement to remove or its index or id"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormContainer with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"setToolbar":{"!description":"Sets the aggregated <code>toolbar<\/code>.","!static":false,"!category":"function","!type":"fn(oToolbar: sap.ui.core.Toolbar) -> sap.ui.layout.form.FormContainer","parameters":{"oToolbar":"type: sap.ui.core.Toolbar, description: The toolbar to set"}},"!module":"sap/ui/layout/form/FormContainer","destroyToolbar":{"!description":"Destroys the toolbar in the aggregation <code>toolbar<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.FormContainer"},"!helpDescription":"A <code>FormContainer<\/code> represents a group inside a <code>Form<\/code>. It consists of <code>FormElements<\/code>.\nThe rendering of the <code>FormContainer<\/code> is done by the <code>FormLayout<\/code> assigned to the <code>Form<\/code>.","destroyFormElements":{"!description":"Destroys all the formElements in the aggregation <code>formElements<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.FormContainer"},"destroyTitle":{"!description":"Destroys the title in the aggregation <code>title<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.FormContainer"}},"sap.ui.layout.form.Form":{"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"getEditable":{"!description":"Gets current value of property <code>editable<\/code>.\r\rApplies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.core.Control","!category":"class","getWidth":{"!description":"Gets current value of property <code>width<\/code>.\r\rWidth of the <code>Form<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"setLayout":{"!description":"Sets the aggregated <code>layout<\/code>.","!static":false,"!category":"function","!type":"fn(oLayout: sap.ui.layout.form.FormLayout) -> sap.ui.layout.form.Form","parameters":{"oLayout":"type: sap.ui.layout.form.FormLayout, description: The layout to set"}},"destroyFormContainers":{"!description":"Destroys all the formContainers in the aggregation <code>formContainers<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.Form"},"getLayout":{"!description":"Gets content of aggregation <code>layout<\/code>.\r\rLayout of the <code>Form<\/code>. The assigned <code>Layout<\/code> renders the <code>Form<\/code>.\nWe recommend using the <code>ResponsiveGridLayout<\/code> for rendering a <code>Form<\/code>,\nas its responsiveness allows the available space to be used in the best way possible.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.FormLayout"},"!constructorDescription":"Constructor for a new sap.ui.layout.form.Form.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEditable editable} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getFormContainers formContainers} : sap.ui.layout.form.FormContainer[] (default)<\/li>\n<li>{@link #getTitle title} : sap.ui.core.Title|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<li>{@link #getLayout layout} : sap.ui.layout.form.FormLayout<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.layout.form.Form","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: the ariaLabelledBy to add; if empty, nothing is inserted"}},"getTitle":{"!description":"Gets content of aggregation <code>title<\/code>.\r\rTitle of the <code>Form<\/code>. Can either be a <code>Title<\/code> element or a string.\nIf a <code>Title<\/code> element it used, the style of the title can be set.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Title | String"},"getFormContainers":{"!description":"Gets content of aggregation <code>formContainers<\/code>.\r\rContainers with the content of the form. A <code>FormContainer<\/code> represents a group inside the <code>Form<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.layout.form.FormContainer]"},"getToolbar":{"!description":"Gets content of aggregation <code>toolbar<\/code>.\r\rToolbar of the <code>Form<\/code>.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored.\nIf a title is needed inside the <code>Toolbar<\/code> it must be added at content to the <code>Toolbar<\/code>.\nIn this case add the <code>Title<\/code> to the <code>ariaLabelledBy<\/code> association.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Toolbar"},"!description":"A <code>Form<\/code> control arranges labels and fields (like input fields) into groups and rows. There are different ways to visualize forms for different screen sizes.\n\nA <code>Form<\/code> is structured into <code>FormContainers<\/code>. Each <code>FormContainer<\/code> consists of <code>FormElements<\/code>.\nThe <code>FormElements<\/code> consists of a label and the form fields.\nA <code>Form<\/code> doesn't render its content by itself. The rendering is done by the assigned <code>FormLayout<\/code>.\nThis is so that the rendering can be adopted to new UI requirements without changing the <code>Form<\/code> itself.\n\nFor the content of a <code>Form<\/code>, <code>VariantLayoutData<\/code> are supported to allow simple switching of the <code>FormLayout<\/code>.\n<code>LayoutData<\/code> on the content can be used to overwrite the default layout of the <code>Form<\/code>.\n\nThe <code>Form<\/code> (and its sub-controls) automatically add label and field assignment to enable screen reader support.\nIt also adds keyboard support to navigate between the fields and groups inside the form.\n\n<b>Note:<\/b> Do not put any layout controls into the <code>FormElements<\/code>. This could destroy the visual layout,\nkeyboard support and screen-reader support.","removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.Form.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"indexOfFormContainer":{"!description":"Checks for the provided <code>sap.ui.layout.form.FormContainer<\/code> in the aggregation <code>formContainers<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oFormContainer: sap.ui.layout.form.FormContainer) -> Number","parameters":{"oFormContainer":"type: sap.ui.layout.form.FormContainer, description: The formContainer whose index is looked for"}},"setTitle":{"!description":"Sets the aggregated <code>title<\/code>.","!static":false,"!category":"function","!type":"fn(vTitle: sap.ui.core.Title | String) -> sap.ui.layout.form.Form","parameters":{"vTitle":"type: sap.ui.core.Title|string, description: The title to set"}},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\r\rWidth of the <code>Form<\/code>.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.form.Form","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"insertFormContainer":{"!description":"Inserts a formContainer into the aggregation <code>formContainers<\/code>.","!static":false,"!category":"function","!type":"fn(oFormContainer: sap.ui.layout.form.FormContainer, iIndex: Number) -> sap.ui.layout.form.Form","parameters":{"oFormContainer":"type: sap.ui.layout.form.FormContainer, description: the formContainer to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the formContainer should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the formContainer is inserted at position 0; for a value\r             greater than the current size of the aggregation, the formContainer is inserted at\r             the last position"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.Form with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"removeAllFormContainers":{"!description":"Removes all the controls from the aggregation <code>formContainers<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.layout.form.FormContainer]"},"destroyLayout":{"!description":"Destroys the layout in the aggregation <code>layout<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.Form"},"setEditable":{"!description":"Sets a new value for property <code>editable<\/code>.\r\rApplies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bEditable: Boolean) -> sap.ui.layout.form.Form","parameters":{"bEditable":"type: boolean, description: New value for property <code>editable<\/code>"}},"setToolbar":{"!description":"Sets the aggregated <code>toolbar<\/code>.","!static":false,"!category":"function","!type":"fn(oToolbar: sap.ui.core.Toolbar) -> sap.ui.layout.form.Form","parameters":{"oToolbar":"type: sap.ui.core.Toolbar, description: The toolbar to set"}},"!module":"sap/ui/layout/form/Form","addFormContainer":{"!description":"Adds some formContainer to the aggregation <code>formContainers<\/code>.","!static":false,"!category":"function","!type":"fn(oFormContainer: sap.ui.layout.form.FormContainer) -> sap.ui.layout.form.Form","parameters":{"oFormContainer":"type: sap.ui.layout.form.FormContainer, description: the formContainer to add; if empty, nothing is inserted"}},"destroyToolbar":{"!description":"Destroys the toolbar in the aggregation <code>toolbar<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.Form"},"!helpDescription":"A <code>Form<\/code> control arranges labels and fields (like input fields) into groups and rows. There are different ways to visualize forms for different screen sizes.\n\nA <code>Form<\/code> is structured into <code>FormContainers<\/code>. Each <code>FormContainer<\/code> consists of <code>FormElements<\/code>.\nThe <code>FormElements<\/code> consists of a label and the form fields.\nA <code>Form<\/code> doesn't render its content by itself. The rendering is done by the assigned <code>FormLayout<\/code>.\nThis is so that the rendering can be adopted to new UI requirements without changing the <code>Form<\/code> itself.\n\nFor the content of a <code>Form<\/code>, <code>VariantLayoutData<\/code> are supported to allow simple switching of the <code>FormLayout<\/code>.\n<code>LayoutData<\/code> on the content can be used to overwrite the default layout of the <code>Form<\/code>.\n\nThe <code>Form<\/code> (and its sub-controls) automatically add label and field assignment to enable screen reader support.\nIt also adds keyboard support to navigate between the fields and groups inside the form.\n\n<b>Note:<\/b> Do not put any layout controls into the <code>FormElements<\/code>. This could destroy the visual layout,\nkeyboard support and screen-reader support.","removeFormContainer":{"!description":"Removes a formContainer from the aggregation <code>formContainers<\/code>.","!static":false,"!category":"function","!type":"fn(vFormContainer: Number | String | sap.ui.layout.form.FormContainer) -> sap.ui.layout.form.FormContainer","parameters":{"vFormContainer":"type: int|string|sap.ui.layout.form.FormContainer, description: The formContainer to remove or its index or id"}},"destroyTitle":{"!description":"Destroys the title in the aggregation <code>title<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.Form"}},"sap.ui.layout.ResponsiveFlowLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.ResponsiveFlowLayout"},"sap.ui.layout.BlockRowColorSets":{"!description":"A string type that is used inside the BlockLayoutRow to set predefined set of colors the cells inside\nthe control. Color sets depend on sap.ui.layout.BlockBackgroundType","ColorSet3":{"!description":"sap.ui.layout.BlockBackgroundType.Default: N/A\nsap.ui.layout.BlockBackgroundType.Light: Color Set 1\nsap.ui.layout.BlockBackgroundType.Mixed: Color Set 1\nsap.ui.layout.BlockBackgroundType.Accent: Color Set 3\nsap.ui.layout.BlockBackgroundType.Dashboard: N/A","!category":"enum","!type":"String"},"ColorSet4":{"!description":"sap.ui.layout.BlockBackgroundType.Default: N/A\nsap.ui.layout.BlockBackgroundType.Light: Color Set 2\nsap.ui.layout.BlockBackgroundType.Mixed: Color Set 2\nsap.ui.layout.BlockBackgroundType.Accent: Color Set 4\nsap.ui.layout.BlockBackgroundType.Dashboard: N/A","!category":"enum","!type":"String"},"!module":"sap/ui/layout/library","ColorSet1":{"!description":"sap.ui.layout.BlockBackgroundType.Default: N/A\nsap.ui.layout.BlockBackgroundType.Light: Color Set 1\nsap.ui.layout.BlockBackgroundType.Mixed: Color Set 1\nsap.ui.layout.BlockBackgroundType.Accent: Color Set 1\nsap.ui.layout.BlockBackgroundType.Dashboard: N/A","!category":"enum","!type":"String"},"ColorSet2":{"!description":"sap.ui.layout.BlockBackgroundType.Default: N/A\nsap.ui.layout.BlockBackgroundType.Light: Color Set 2\nsap.ui.layout.BlockBackgroundType.Mixed: Color Set 2\nsap.ui.layout.BlockBackgroundType.Accent: Color Set 2\nsap.ui.layout.BlockBackgroundType.Dashboard: N/A","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.layout.form.ResponsiveGridLayout":{"getEmptySpanS":{"!description":"Gets current value of property <code>emptySpanS<\/code>.\r\rNumber of grid cells that are empty at the end of each line on small size.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"!proto":"sap.ui.layout.form.FormLayout","!category":"class","getAdjustLabelSpan":{"!description":"Gets current value of property <code>adjustLabelSpan<\/code>.\r\rIf set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row.\nIf only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms<\/code>.\nThis is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code>\n(because every <code>FormContainer<\/code> has its own <code>Grid<\/code> inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size.\nThe number of <code>FormContainers<\/code> doesn't matter in this case.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setBreakpointL":{"!description":"Sets a new value for property <code>breakpointL<\/code>.\r\rBreakpoint (in pixel) between Medium size and Large size.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1024<\/code>.","!static":false,"!category":"function","!type":"fn(iBreakpointL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iBreakpointL":"type: int, description: New value for property <code>breakpointL<\/code>"}},"setBreakpointM":{"!description":"Sets a new value for property <code>breakpointM<\/code>.\r\rBreakpoint (in pixel) between Small size and Medium size.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>600<\/code>.","!static":false,"!category":"function","!type":"fn(iBreakpointM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iBreakpointM":"type: int, description: New value for property <code>breakpointM<\/code>"}},"!constructorDescription":"Constructor for a new <code>sap.ui.layout.form.ResponsiveGridLayout<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getLabelSpanXL labelSpanXL} : int (default: -1)<\/li>\n<li>{@link #getLabelSpanL labelSpanL} : int (default: 4)<\/li>\n<li>{@link #getLabelSpanM labelSpanM} : int (default: 2)<\/li>\n<li>{@link #getLabelSpanS labelSpanS} : int (default: 12)<\/li>\n<li>{@link #getAdjustLabelSpan adjustLabelSpan} : boolean (default: true)<\/li>\n<li>{@link #getEmptySpanXL emptySpanXL} : int (default: -1)<\/li>\n<li>{@link #getEmptySpanL emptySpanL} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanM emptySpanM} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanS emptySpanS} : int (default: 0)<\/li>\n<li>{@link #getColumnsXL columnsXL} : int (default: -1)<\/li>\n<li>{@link #getColumnsL columnsL} : int (default: 2)<\/li>\n<li>{@link #getColumnsM columnsM} : int (default: 1)<\/li>\n<li>{@link #getSingleContainerFullSize singleContainerFullSize} : boolean (default: true)<\/li>\n<li>{@link #getBreakpointXL breakpointXL} : int (default: 1440)<\/li>\n<li>{@link #getBreakpointL breakpointL} : int (default: 1024)<\/li>\n<li>{@link #getBreakpointM breakpointM} : int (default: 600)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.layout.form.FormLayout#constructor sap.ui.layout.form.FormLayout}\ncan be used as well.","getBreakpointL":{"!description":"Gets current value of property <code>breakpointL<\/code>.\r\rBreakpoint (in pixel) between Medium size and Large size.\r\rDefault value is <code>1024<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getBreakpointM":{"!description":"Gets current value of property <code>breakpointM<\/code>.\r\rBreakpoint (in pixel) between Small size and Medium size.\r\rDefault value is <code>600<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getLabelSpanXL":{"!description":"Gets current value of property <code>labelSpanXL<\/code>.\r\rDefault span for labels in extra large size.\n\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getEmptySpanM":{"!description":"Gets current value of property <code>emptySpanM<\/code>.\r\rNumber of grid cells that are empty at the end of each line on medium size.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setLabelSpanL":{"!description":"Sets a new value for property <code>labelSpanL<\/code>.\r\rDefault span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>4<\/code>.","!static":false,"!category":"function","!type":"fn(iLabelSpanL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iLabelSpanL":"type: int, description: New value for property <code>labelSpanL<\/code>"}},"getColumnsXL":{"!description":"Gets current value of property <code>columnsXL<\/code>.\r\rNumber of columns for extra large size.\n\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setColumnsXL":{"!description":"Sets a new value for property <code>columnsXL<\/code>.\r\rNumber of columns for extra large size.\n\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn(iColumnsXL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iColumnsXL":"type: int, description: New value for property <code>columnsXL<\/code>"}},"setLabelSpanM":{"!description":"Sets a new value for property <code>labelSpanM<\/code>.\r\rDefault span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn(iLabelSpanM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iLabelSpanM":"type: int, description: New value for property <code>labelSpanM<\/code>"}},"setSingleContainerFullSize":{"!description":"Sets a new value for property <code>singleContainerFullSize<\/code>.\r\rIf the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set,\nthe <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>.\nIn this case the properties <code>columnsXL<\/code>, <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bSingleContainerFullSize: Boolean) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"bSingleContainerFullSize":"type: boolean, description: New value for property <code>singleContainerFullSize<\/code>"}},"setBreakpointXL":{"!description":"Sets a new value for property <code>breakpointXL<\/code>.\r\rBreakpoint (in pixel) between large size and extra large (XL) size.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1440<\/code>.","!static":false,"!category":"function","!type":"fn(iBreakpointXL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iBreakpointXL":"type: int, description: New value for property <code>breakpointXL<\/code>"}},"getEmptySpanL":{"!description":"Gets current value of property <code>emptySpanL<\/code>.\r\rNumber of grid cells that are empty at the end of each line on large size.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setLabelSpanS":{"!description":"Sets a new value for property <code>labelSpanS<\/code>.\r\rDefault span for labels in small size.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>12<\/code>.","!static":false,"!category":"function","!type":"fn(iLabelSpanS: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iLabelSpanS":"type: int, description: New value for property <code>labelSpanS<\/code>"}},"!description":"The <code>ResponsiveGridLayout<\/code> control renders a <code>Form<\/code> using a responsive grid. Internally the <code>Grid<\/code> control is used for rendering.\nUsing this layout, the <code>Form<\/code> is rendered in a responsive way.\nDepending on the available space, the <code>FormContainers<\/code> are rendered in one or different columns and the labels are rendered in the same row as the fields or above the fields.\nThis behavior can be influenced by the properties of this layout control.\n\nOn the <code>FormContainers<\/code>, labels and content fields, <code>GridData<\/code> can be used to change the default rendering.\n<code>GridData<\/code> is not supported for <code>FormElements<\/code>.\n\n<b>Note:<\/b> If <code>GridData<\/code> is used, this may result in a much more complex layout than the default one.\nThis means that in some cases, the calculation for the other content may not bring the expected result.\nIn such cases, <code>GridData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","getLabelSpanL":{"!description":"Gets current value of property <code>labelSpanL<\/code>.\r\rDefault span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\r\rDefault value is <code>4<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setEmptySpanM":{"!description":"Sets a new value for property <code>emptySpanM<\/code>.\r\rNumber of grid cells that are empty at the end of each line on medium size.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iEmptySpanM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iEmptySpanM":"type: int, description: New value for property <code>emptySpanM<\/code>"}},"getLabelSpanM":{"!description":"Gets current value of property <code>labelSpanM<\/code>.\r\rDefault span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.ResponsiveGridLayout.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setAdjustLabelSpan":{"!description":"Sets a new value for property <code>adjustLabelSpan<\/code>.\r\rIf set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row.\nIf only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms<\/code>.\nThis is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code>\n(because every <code>FormContainer<\/code> has its own <code>Grid<\/code> inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size.\nThe number of <code>FormContainers<\/code> doesn't matter in this case.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bAdjustLabelSpan: Boolean) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"bAdjustLabelSpan":"type: boolean, description: New value for property <code>adjustLabelSpan<\/code>"}},"setEmptySpanS":{"!description":"Sets a new value for property <code>emptySpanS<\/code>.\r\rNumber of grid cells that are empty at the end of each line on small size.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iEmptySpanS: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iEmptySpanS":"type: int, description: New value for property <code>emptySpanS<\/code>"}},"setEmptySpanXL":{"!description":"Sets a new value for property <code>emptySpanXL<\/code>.\r\rNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn(iEmptySpanXL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iEmptySpanXL":"type: int, description: New value for property <code>emptySpanXL<\/code>"}},"getBreakpointXL":{"!description":"Gets current value of property <code>breakpointXL<\/code>.\r\rBreakpoint (in pixel) between large size and extra large (XL) size.\r\rDefault value is <code>1440<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getEmptySpanXL":{"!description":"Gets current value of property <code>emptySpanXL<\/code>.\r\rNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getLabelSpanS":{"!description":"Gets current value of property <code>labelSpanS<\/code>.\r\rDefault span for labels in small size.\r\rDefault value is <code>12<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setEmptySpanL":{"!description":"Sets a new value for property <code>emptySpanL<\/code>.\r\rNumber of grid cells that are empty at the end of each line on large size.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iEmptySpanL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iEmptySpanL":"type: int, description: New value for property <code>emptySpanL<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveGridLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/layout/form/ResponsiveGridLayout","getColumnsL":{"!description":"Gets current value of property <code>columnsL<\/code>.\r\rNumber of columns for large size.\n\nThe number of columns for large size must not be smaller than the number of columns for medium size.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"!helpDescription":"The <code>ResponsiveGridLayout<\/code> control renders a <code>Form<\/code> using a responsive grid. Internally the <code>Grid<\/code> control is used for rendering.\nUsing this layout, the <code>Form<\/code> is rendered in a responsive way.\nDepending on the available space, the <code>FormContainers<\/code> are rendered in one or different columns and the labels are rendered in the same row as the fields or above the fields.\nThis behavior can be influenced by the properties of this layout control.\n\nOn the <code>FormContainers<\/code>, labels and content fields, <code>GridData<\/code> can be used to change the default rendering.\n<code>GridData<\/code> is not supported for <code>FormElements<\/code>.\n\n<b>Note:<\/b> If <code>GridData<\/code> is used, this may result in a much more complex layout than the default one.\nThis means that in some cases, the calculation for the other content may not bring the expected result.\nIn such cases, <code>GridData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","getColumnsM":{"!description":"Gets current value of property <code>columnsM<\/code>.\r\rNumber of columns for medium size.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setColumnsM":{"!description":"Sets a new value for property <code>columnsM<\/code>.\r\rNumber of columns for medium size.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn(iColumnsM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iColumnsM":"type: int, description: New value for property <code>columnsM<\/code>"}},"setColumnsL":{"!description":"Sets a new value for property <code>columnsL<\/code>.\r\rNumber of columns for large size.\n\nThe number of columns for large size must not be smaller than the number of columns for medium size.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn(iColumnsL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iColumnsL":"type: int, description: New value for property <code>columnsL<\/code>"}},"getSingleContainerFullSize":{"!description":"Gets current value of property <code>singleContainerFullSize<\/code>.\r\rIf the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set,\nthe <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>.\nIn this case the properties <code>columnsXL<\/code>, <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setLabelSpanXL":{"!description":"Sets a new value for property <code>labelSpanXL<\/code>.\r\rDefault span for labels in extra large size.\n\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn(iLabelSpanXL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","parameters":{"iLabelSpanXL":"type: int, description: New value for property <code>labelSpanXL<\/code>"}}},"sap.ui.layout.form.ResponsiveLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.ResponsiveLayout"},"sap.ui.layout.form.GridLayout":{"!description":"This <code>FormLayout<\/code> renders a <code>Form<\/code> using a HTML-table based grid.\nThis can be a 16 column grid or an 8 column grid. The grid is stable, so the alignment of the fields is the same for all screen sizes or widths of the <code>Form<\/code>.\nOnly the width of the single grid columns depends on the available width.\n\nTo adjust the appearance inside the <code>GridLayout<\/code>, you can use <code>GridContainerData<\/code> for <code>FormContainers<\/code>\nand <code>GridElementData<\/code> for content fields.\n\n<b>Note:<\/b> If content fields have a <code>width<\/code> property this will be ignored, as the width of the controls is set by the grid cells.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.GridLayout.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new sap.ui.layout.form.GridLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSingleColumn singleColumn} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.layout.form.FormLayout#constructor sap.ui.layout.form.FormLayout}\ncan be used as well.","!module":"sap/ui/layout/form/GridLayout","!helpDescription":"This <code>FormLayout<\/code> renders a <code>Form<\/code> using a HTML-table based grid.\nThis can be a 16 column grid or an 8 column grid. The grid is stable, so the alignment of the fields is the same for all screen sizes or widths of the <code>Form<\/code>.\nOnly the width of the single grid columns depends on the available width.\n\nTo adjust the appearance inside the <code>GridLayout<\/code>, you can use <code>GridContainerData<\/code> for <code>FormContainers<\/code>\nand <code>GridElementData<\/code> for content fields.\n\n<b>Note:<\/b> If content fields have a <code>width<\/code> property this will be ignored, as the width of the controls is set by the grid cells.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","setSingleColumn":{"!description":"Sets a new value for property <code>singleColumn<\/code>.\r\rIf set, the grid renders only one <code>FormContainer<\/code> per column. That means one <code>FormContainer<\/code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer<\/code> can use the full width of the grid or two <code>FormContainers<\/code> can be placed beside each other. In this case the whole grid has 16 cells per row.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bSingleColumn: Boolean) -> sap.ui.layout.form.GridLayout","parameters":{"bSingleColumn":"type: boolean, description: New value for property <code>singleColumn<\/code>"}},"!proto":"sap.ui.layout.form.FormLayout","getSingleColumn":{"!description":"Gets current value of property <code>singleColumn<\/code>.\r\rIf set, the grid renders only one <code>FormContainer<\/code> per column. That means one <code>FormContainer<\/code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer<\/code> can use the full width of the grid or two <code>FormContainers<\/code> can be placed beside each other. In this case the whole grid has 16 cells per row.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!category":"class"},"sap.ui.layout.form.GridContainerData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridContainerData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.GridContainerData"},"sap.ui.layout.form.FormLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.FormLayout"},"sap.ui.layout.form.FormContainer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormContainer with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.FormContainer"},"sap.ui.layout.form.GridContainerData":{"!description":"The <code>GridLayout<\/code>-specific layout data for <code>FormContainers<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridContainerData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.GridContainerData.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new sap.ui.layout.form.GridContainerData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getHalfGrid halfGrid} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","!module":"sap/ui/layout/form/GridContainerData","getHalfGrid":{"!description":"Gets current value of property <code>halfGrid<\/code>.\r\rIf set, the container takes half the width of the <code>Form<\/code> (8 cells), if not it takes the full width (16 cells).\nIf the <code>GridLayout<\/code> is set to <code>singleColumn<\/code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!helpDescription":"The <code>GridLayout<\/code>-specific layout data for <code>FormContainers<\/code>.","!proto":"sap.ui.core.LayoutData","!category":"class","setHalfGrid":{"!description":"Sets a new value for property <code>halfGrid<\/code>.\r\rIf set, the container takes half the width of the <code>Form<\/code> (8 cells), if not it takes the full width (16 cells).\nIf the <code>GridLayout<\/code> is set to <code>singleColumn<\/code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bHalfGrid: Boolean) -> sap.ui.layout.form.GridContainerData","parameters":{"bHalfGrid":"type: boolean, description: New value for property <code>halfGrid<\/code>"}}},"sap.ui.layout.HorizontalLayout":{"!description":"A layout that provides support for horizontal alignment of controls","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.HorizontalLayout.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setAllowWrapping":{"!description":"Sets a new value for property <code>allowWrapping<\/code>.\r\rSpecifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bAllowWrapping: Boolean) -> sap.ui.layout.HorizontalLayout","parameters":{"bAllowWrapping":"type: boolean, description: New value for property <code>allowWrapping<\/code>"}},"getAccessibilityInfo":{"!static":false,"!category":"function","!type":"fn()"},"getAllowWrapping":{"!description":"Gets current value of property <code>allowWrapping<\/code>.\r\rSpecifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>content<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> Number","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"}},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\r\rThe controls inside this layout","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.core.Control","removeAllContent":{"!description":"Removes all the controls from the aggregation <code>content<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!category":"class","addContent":{"!description":"Adds some content to the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.HorizontalLayout","parameters":{"oContent":"type: sap.ui.core.Control, description: the content to add; if empty, nothing is inserted"}},"removeContent":{"!description":"Removes a content from the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.HorizontalLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new HorizontalLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAllowWrapping allowWrapping} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/HorizontalLayout","!helpDescription":"A layout that provides support for horizontal alignment of controls","insertContent":{"!description":"Inserts a content into the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.HorizontalLayout","parameters":{"oContent":"type: sap.ui.core.Control, description: the content to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the content should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value\r             greater than the current size of the aggregation, the content is inserted at\r             the last position"}},"destroyContent":{"!description":"Destroys all the content in the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.HorizontalLayout"}},"sap.ui.layout.Grid":{"setContainerQuery":{"!description":"Sets a new value for property <code>containerQuery<\/code>.\r\rIf true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bContainerQuery: Boolean) -> sap.ui.layout.Grid","parameters":{"bContainerQuery":"type: boolean, description: New value for property <code>containerQuery<\/code>"}},"getAccessibilityInfo":{"!static":false,"!category":"function","!type":"fn()"},"setDefaultSpan":{"!description":"Sets a new value for property <code>defaultSpan<\/code>.\r\rOptional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>XL3 L3 M6 S12<\/code>.","!static":false,"!category":"function","!type":"fn(sDefaultSpan: sap.ui.layout.GridSpan) -> sap.ui.layout.Grid","parameters":{"sDefaultSpan":"type: sap.ui.layout.GridSpan, description: New value for property <code>defaultSpan<\/code>"}},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\r\rControls that are placed into Grid layout.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.core.Control","setVSpacing":{"!description":"Sets a new value for property <code>vSpacing<\/code>.\r\rOptional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn(fVSpacing: Number) -> sap.ui.layout.Grid","parameters":{"fVSpacing":"type: float, description: New value for property <code>vSpacing<\/code>"}},"!category":"class","getWidth":{"!description":"Gets current value of property <code>width<\/code>.\r\rOptional. Width of the Grid. If not specified, then 100%.\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"getVSpacing":{"!description":"Gets current value of property <code>vSpacing<\/code>.\r\rOptional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setPosition":{"!description":"Sets a new value for property <code>position<\/code>.\r\rOptional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>Left<\/code>.","!static":false,"!category":"function","!type":"fn(sPosition: sap.ui.layout.GridPosition) -> sap.ui.layout.Grid","parameters":{"sPosition":"type: sap.ui.layout.GridPosition, description: New value for property <code>position<\/code>"}},"!constructorDescription":"Constructor for a new Grid.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getVSpacing vSpacing} : float (default: 1)<\/li>\n<li>{@link #getHSpacing hSpacing} : float (default: 1)<\/li>\n<li>{@link #getPosition position} : sap.ui.layout.GridPosition (default: Left)<\/li>\n<li>{@link #getDefaultSpan defaultSpan} : sap.ui.layout.GridSpan (default: XL3 L3 M6 S12)<\/li>\n<li>{@link #getDefaultIndent defaultIndent} : sap.ui.layout.GridIndent (default: XL0 L0 M0 S0)<\/li>\n<li>{@link #getContainerQuery containerQuery} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","destroyContent":{"!description":"Destroys all the content in the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.Grid"},"setDefaultIndent":{"!description":"Sets a new value for property <code>defaultIndent<\/code>.\r\rOptional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>XL0 L0 M0 S0<\/code>.","!static":false,"!category":"function","!type":"fn(sDefaultIndent: sap.ui.layout.GridIndent) -> sap.ui.layout.Grid","parameters":{"sDefaultIndent":"type: sap.ui.layout.GridIndent, description: New value for property <code>defaultIndent<\/code>"}},"!description":"The Grid control is a layout which positions its child controls in a 12 column flow layout. Its children can be specified to take on a variable amount of columns depending on available screen size. With this control it is possible to achieve flexible layouts and line-breaks for extra large-, large-, medium- and small-sized screens, such as large desktop, desktop, tablet, and mobile. The Grid control's width can be percentage- or pixel-based and the spacing between its columns can be set to various pre-defined values.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.Grid.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>content<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> Number","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"}},"removeAllContent":{"!description":"Removes all the controls from the aggregation <code>content<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"getDefaultIndent":{"!description":"Gets current value of property <code>defaultIndent<\/code>.\r\rOptional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\r\rDefault value is <code>XL0 L0 M0 S0<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.GridIndent"},"setHSpacing":{"!description":"Sets a new value for property <code>hSpacing<\/code>.\r\rOptional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn(fHSpacing: Number) -> sap.ui.layout.Grid","parameters":{"fHSpacing":"type: float, description: New value for property <code>hSpacing<\/code>"}},"addContent":{"!description":"Adds some content to the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.Grid","parameters":{"oContent":"type: sap.ui.core.Control, description: the content to add; if empty, nothing is inserted"}},"getHSpacing":{"!description":"Gets current value of property <code>hSpacing<\/code>.\r\rOptional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"removeContent":{"!description":"Removes a content from the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"}},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\r\rOptional. Width of the Grid. If not specified, then 100%.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.Grid","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"getContainerQuery":{"!description":"Gets current value of property <code>containerQuery<\/code>.\r\rIf true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Grid with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getPosition":{"!description":"Gets current value of property <code>position<\/code>.\r\rOptional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\r\rDefault value is <code>Left<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.GridPosition"},"!module":"sap/ui/layout/Grid","!helpDescription":"The Grid control is a layout which positions its child controls in a 12 column flow layout. Its children can be specified to take on a variable amount of columns depending on available screen size. With this control it is possible to achieve flexible layouts and line-breaks for extra large-, large-, medium- and small-sized screens, such as large desktop, desktop, tablet, and mobile. The Grid control's width can be percentage- or pixel-based and the spacing between its columns can be set to various pre-defined values.","insertContent":{"!description":"Inserts a content into the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.Grid","parameters":{"oContent":"type: sap.ui.core.Control, description: the content to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the content should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value\r             greater than the current size of the aggregation, the content is inserted at\r             the last position"}},"getDefaultSpan":{"!description":"Gets current value of property <code>defaultSpan<\/code>.\r\rOptional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\r\rDefault value is <code>XL3 L3 M6 S12<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.GridSpan"}},"sap.ui.layout.PaneContainer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.PaneContainer with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.PaneContainer"},"sap.ui.layout.form.Form_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.Form with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.Form"},"sap.ui.layout.form.SimpleForm":{"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"getEmptySpanS":{"!description":"Gets current value of property <code>emptySpanS<\/code>.\r\rNumber of grid cells that are empty at the end of each line on small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getEditable":{"!description":"Gets current value of property <code>editable<\/code>.\r\rApplies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setMinWidth":{"!description":"Sets a new value for property <code>minWidth<\/code>.\r\rThe overall minimum width in pixels that is used for the <code>SimpleForm<\/code>. If the available width is below the given <code>minWidth<\/code> the <code>SimpleForm<\/code> will create a new row for the next group (<code>FormContainer<\/code>).\nThe default value is -1, meaning that inner groups (<code>FormContainers<\/code>) will be stacked until <code>maxContainerCols<\/code> is reached, irrespective of whether a <code>width<\/code> is reached or the available parents width is reached.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn(iMinWidth: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iMinWidth":"type: int, description: New value for property <code>minWidth<\/code>"}},"setLayout":{"!description":"Sets a new value for property <code>layout<\/code>.\r\rThe <code>FormLayout<\/code> that is used to render the <code>SimpleForm<\/code>.\n\nWe recommend using the <code>ResponsiveGridLayout<\/code> for rendering a <code>SimpleForm<\/code>, as its responsiveness uses the space available in the best way possible.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>ResponsiveLayout<\/code>.","!static":false,"!category":"function","!type":"fn(sLayout: sap.ui.layout.form.SimpleFormLayout) -> sap.ui.layout.form.SimpleForm","parameters":{"sLayout":"type: sap.ui.layout.form.SimpleFormLayout, description: New value for property <code>layout<\/code>"}},"getAdjustLabelSpan":{"!description":"Gets current value of property <code>adjustLabelSpan<\/code>.\r\rIf set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row.\nIf only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms<\/code>.\nThis is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code>\n(because every <code>FormContainer<\/code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size.\nThe number of <code>FormContainers<\/code> doesn't matter in this case.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getTitle":{"!description":"Gets content of aggregation <code>title<\/code>.\r\rTitle element of the <code>SimpleForm<\/code>. Can either be a <code>Title<\/code> element, or a string.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Title | String"},"getEmptySpanM":{"!description":"Gets current value of property <code>emptySpanM<\/code>.\r\rNumber of grid cells that are empty at the end of each line on medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setColumnsXL":{"!description":"Sets a new value for property <code>columnsXL<\/code>.\r\rForm columns for extra large size.\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn(iColumnsXL: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iColumnsXL":"type: int, description: New value for property <code>columnsXL<\/code>"}},"getToolbar":{"!description":"Gets content of aggregation <code>toolbar<\/code>.\r\rToolbar of the <code>SimpleForm<\/code>.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored.\nIf a title is needed inside the <code>Toolbar<\/code> it must be added at content to the <code>Toolbar<\/code>.\nIn this case add the <code>Title<\/code> to the <code>ariaLabelledBy<\/code> association.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Toolbar"},"destroyContent":{"!description":"Destroys all the content in the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.SimpleForm"},"setBreakpointXL":{"!description":"Sets a new value for property <code>breakpointXL<\/code>.\r\rBreakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1440<\/code>.","!static":false,"!category":"function","!type":"fn(iBreakpointXL: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iBreakpointXL":"type: int, description: New value for property <code>breakpointXL<\/code>"}},"getEmptySpanL":{"!description":"Gets current value of property <code>emptySpanL<\/code>.\r\rNumber of grid cells that are empty at the end of each line on large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"!description":"The <code>SimpleForm<\/code> provides an easy-to-use API to create simple forms.\nInside a <code>SimpleForm<\/code>, a <code>Form<\/code> control is created along with its <code>FormContainers<\/code> and <code>FormElements<\/code>, but the complexity in the API is removed.\n<ul>\n<li>A new <code>Title<\/code> or <code>Toolbar<\/code> starts a new group (<code>FormContainer<\/code>) in the form.<\/li>\n<li>A new <code>Label<\/code> starts a new row (<code>FormElement<\/code>) in the form.<\/li>\n<li>All other controls will be assigned to the row (<code>FormElement<\/code>) that started with the last label.<\/li>\n<\/ul>\nUse <code>LayoutData<\/code> to influence the layout for special cases in the Input/Display controls.\n\n<b>Note:<\/b> If a more complex form is needed, use <code>Form<\/code> instead.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.SimpleForm.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setEmptySpanXL":{"!description":"Sets a new value for property <code>emptySpanXL<\/code>.\r\rNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used (from the backward compatibility reasons).\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn(iEmptySpanXL: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iEmptySpanXL":"type: int, description: New value for property <code>emptySpanXL<\/code>"}},"setTitle":{"!description":"Sets the aggregated <code>title<\/code>.","!static":false,"!category":"function","!type":"fn(vTitle: sap.ui.core.Title | String) -> sap.ui.layout.form.SimpleForm","parameters":{"vTitle":"type: sap.ui.core.Title|string, description: The title to set"}},"removeContent":{"!description":"Removes a content from the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.core.Element) -> sap.ui.core.Element","parameters":{"vContent":"type: int|string|sap.ui.core.Element, description: The content to remove or its index or id"}},"getEmptySpanXL":{"!description":"Gets current value of property <code>emptySpanXL<\/code>.\r\rNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used (from the backward compatibility reasons).\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.SimpleForm with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/layout/form/SimpleForm","getColumnsL":{"!description":"Gets current value of property <code>columnsL<\/code>.\r\rForm columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"!helpDescription":"The <code>SimpleForm<\/code> provides an easy-to-use API to create simple forms.\nInside a <code>SimpleForm<\/code>, a <code>Form<\/code> control is created along with its <code>FormContainers<\/code> and <code>FormElements<\/code>, but the complexity in the API is removed.\n<ul>\n<li>A new <code>Title<\/code> or <code>Toolbar<\/code> starts a new group (<code>FormContainer<\/code>) in the form.<\/li>\n<li>A new <code>Label<\/code> starts a new row (<code>FormElement<\/code>) in the form.<\/li>\n<li>All other controls will be assigned to the row (<code>FormElement<\/code>) that started with the last label.<\/li>\n<\/ul>\nUse <code>LayoutData<\/code> to influence the layout for special cases in the Input/Display controls.\n\n<b>Note:<\/b> If a more complex form is needed, use <code>Form<\/code> instead.","getColumnsM":{"!description":"Gets current value of property <code>columnsM<\/code>.\r\rForm columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"insertContent":{"!description":"Inserts a content into the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Element, iIndex: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"oContent":"type: sap.ui.core.Element, description: the content to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the content should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value\r             greater than the current size of the aggregation, the content is inserted at\r             the last position"}},"setLabelSpanXL":{"!description":"Sets a new value for property <code>labelSpanXL<\/code>.\r\rDefault span for labels in extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used (from the backward compatibility reasons).\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn(iLabelSpanXL: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iLabelSpanXL":"type: int, description: New value for property <code>labelSpanXL<\/code>"}},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"getLabelMinWidth":{"!description":"Gets current value of property <code>labelMinWidth<\/code>.\r\rSpecifies the min-width in pixels of the label in all form rows.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\r\rDefault value is <code>192<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\r\rThe content of the form is structured in the following way:\n<ul>\n<li>Add a <code>Title<\/code> or <code>Toolbar<\/code> control to start a new group (<code>FormContainer<\/code>).<\/li>\n<li>Add a <code>Label<\/code> control to start a new row (<code>FormElement<\/code>).<\/li>\n<li>Add controls as input fields, text fields or other as needed.<\/li>\n<li>Use <code>LayoutData<\/code> to influence the layout for special cases in the single controls.\nFor example, if a <code>ResponsiveLayout<\/code> is used as a layout, the form content is weighted using weight 3 for the labels and weight 5 for the fields part. By default the label column is 192 pixels wide.\nIf your input controls should influence their width, you can add <code>sap.ui.layout.ResponsiveFlowLayoutData<\/code> to them via <code>setLayoutData<\/code> method.\nEnsure that the sum of the weights in the <code>ResponsiveFlowLayoutData<\/code> is not more than 5, as this is the total width of the input control part of each form row.<\/li>\n<\/ul>\nExample for a row where the <code>Input<\/code> weight 4 and the second <code>Input<\/code> weight 1 (using <code>ResponsiveLayout<\/code>):\n<pre>\nnew sap.m.Label({text:\"Label\"});\nnew sap.m.Input({value:\"Weight 4\", layoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:4})}),\nnew sap.m.Input({value:\"Weight 1\", layoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:1})}),\n<\/pre>\n\nFor example, if a <code>ResponsiveGridLayout<\/code> is used as a layout, there are 12 cells in one row. Depending on the screen size the labels use the defined <code>labelSpan<\/code>.\nThe remaining cells are used for the fields (and <code>emptySpan<\/code> if defined). The available cells are distributed to all fields in the row. If one field should use a fixed number of cells\nyou can add <code>sap.ui.layout.GridData<\/code> to them via <code>setLayoutData<\/code> method.\nIf there are additional fields in the row they will get the remaining cells.\n<\/ul>\nExample for a row with two <code>Input<\/code> controls where one uses four cells on small screens, one cell on medium screens and 2 cells on larger screens (using <code>ResponsiveGridLayout<\/code>):\n<pre>\nnew sap.m.Label({text:\"Label\"});\nnew sap.m.Input({value:\"auto size\"}),\nnew sap.m.Input({value:\"fix size\", layoutData: new sap.ui.layout.GridData({span: \"XL1 L1 M2 S4\"})}),\n<\/pre>\n\n<b>Note:<\/b> Do not put any layout controls in here. This could destroy the visual layout,\nkeyboard support and screen-reader support.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Element]"},"!proto":"sap.ui.core.Control","getBackgroundDesign":{"!description":"Gets current value of property <code>backgroundDesign<\/code>.\r\rSpecifies the background color of the <code>SimpleForm<\/code> content.\n\nThe visualization of the different options depends on the used theme.\r\rDefault value is <code>Translucent<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.BackgroundDesign"},"setBackgroundDesign":{"!description":"Sets a new value for property <code>backgroundDesign<\/code>.\r\rSpecifies the background color of the <code>SimpleForm<\/code> content.\n\nThe visualization of the different options depends on the used theme.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>Translucent<\/code>.","!static":false,"!category":"function","!type":"fn(sBackgroundDesign: sap.ui.layout.BackgroundDesign) -> sap.ui.layout.form.SimpleForm","parameters":{"sBackgroundDesign":"type: sap.ui.layout.BackgroundDesign, description: New value for property <code>backgroundDesign<\/code>"}},"!category":"class","getWidth":{"!description":"Gets current value of property <code>width<\/code>.\r\rWidth of the form.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"setBreakpointL":{"!description":"Sets a new value for property <code>breakpointL<\/code>.\r\rBreakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1024<\/code>.","!static":false,"!category":"function","!type":"fn(iBreakpointL: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iBreakpointL":"type: int, description: New value for property <code>breakpointL<\/code>"}},"setMaxContainerCols":{"!description":"Sets a new value for property <code>maxContainerCols<\/code>.\r\rThe maximum amount of groups (<code>FormContainers<\/code>) per row that is used before a new row is started.\n\n<b>Note:<\/b> If a <code>ResponsiveGridLayout<\/code> is used as a <code>layout<\/code>, this property is not used. Please use the properties <code>ColumnsL<\/code> and <code>ColumnsM<\/code> in this case.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn(iMaxContainerCols: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iMaxContainerCols":"type: int, description: New value for property <code>maxContainerCols<\/code>"}},"setBreakpointM":{"!description":"Sets a new value for property <code>breakpointM<\/code>.\r\rBreakpoint between Small size and Medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>600<\/code>.","!static":false,"!category":"function","!type":"fn(iBreakpointM: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iBreakpointM":"type: int, description: New value for property <code>breakpointM<\/code>"}},"getLayout":{"!description":"Gets current value of property <code>layout<\/code>.\r\rThe <code>FormLayout<\/code> that is used to render the <code>SimpleForm<\/code>.\n\nWe recommend using the <code>ResponsiveGridLayout<\/code> for rendering a <code>SimpleForm<\/code>, as its responsiveness uses the space available in the best way possible.\r\rDefault value is <code>ResponsiveLayout<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.SimpleFormLayout"},"getMinWidth":{"!description":"Gets current value of property <code>minWidth<\/code>.\r\rThe overall minimum width in pixels that is used for the <code>SimpleForm<\/code>. If the available width is below the given <code>minWidth<\/code> the <code>SimpleForm<\/code> will create a new row for the next group (<code>FormContainer<\/code>).\nThe default value is -1, meaning that inner groups (<code>FormContainers<\/code>) will be stacked until <code>maxContainerCols<\/code> is reached, irrespective of whether a <code>width<\/code> is reached or the available parents width is reached.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"!constructorDescription":"Constructor for a new sap.ui.layout.form.SimpleForm.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getMaxContainerCols maxContainerCols} : int (default: 2)<\/li>\n<li>{@link #getMinWidth minWidth} : int (default: -1)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEditable editable} : boolean<\/li>\n<li>{@link #getLabelMinWidth labelMinWidth} : int (default: 192)<\/li>\n<li>{@link #getLayout layout} : sap.ui.layout.form.SimpleFormLayout (default: ResponsiveLayout)<\/li>\n<li>{@link #getLabelSpanXL labelSpanXL} : int (default: -1)<\/li>\n<li>{@link #getLabelSpanL labelSpanL} : int (default: 4)<\/li>\n<li>{@link #getLabelSpanM labelSpanM} : int (default: 2)<\/li>\n<li>{@link #getLabelSpanS labelSpanS} : int (default: 12)<\/li>\n<li>{@link #getAdjustLabelSpan adjustLabelSpan} : boolean (default: true)<\/li>\n<li>{@link #getEmptySpanXL emptySpanXL} : int (default: -1)<\/li>\n<li>{@link #getEmptySpanL emptySpanL} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanM emptySpanM} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanS emptySpanS} : int (default: 0)<\/li>\n<li>{@link #getColumnsXL columnsXL} : int (default: -1)<\/li>\n<li>{@link #getColumnsL columnsL} : int (default: 2)<\/li>\n<li>{@link #getColumnsM columnsM} : int (default: 1)<\/li>\n<li>{@link #getSingleContainerFullSize singleContainerFullSize} : boolean (default: true)<\/li>\n<li>{@link #getBreakpointXL breakpointXL} : int (default: 1440)<\/li>\n<li>{@link #getBreakpointL breakpointL} : int (default: 1024)<\/li>\n<li>{@link #getBreakpointM breakpointM} : int (default: 600)<\/li>\n<li>{@link #getBackgroundDesign backgroundDesign} : sap.ui.layout.BackgroundDesign (default: Translucent)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Element[] (default)<\/li>\n<li>{@link #getTitle title} : sap.ui.core.Title|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.layout.form.SimpleForm","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: the ariaLabelledBy to add; if empty, nothing is inserted"}},"getBreakpointL":{"!description":"Gets current value of property <code>breakpointL<\/code>.\r\rBreakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>1024<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getBreakpointM":{"!description":"Gets current value of property <code>breakpointM<\/code>.\r\rBreakpoint between Small size and Medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>600<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getLabelSpanXL":{"!description":"Gets current value of property <code>labelSpanXL<\/code>.\r\rDefault span for labels in extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used (from the backward compatibility reasons).\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setLabelSpanL":{"!description":"Sets a new value for property <code>labelSpanL<\/code>.\r\rDefault span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>4<\/code>.","!static":false,"!category":"function","!type":"fn(iLabelSpanL: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iLabelSpanL":"type: int, description: New value for property <code>labelSpanL<\/code>"}},"getColumnsXL":{"!description":"Gets current value of property <code>columnsXL<\/code>.\r\rForm columns for extra large size.\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).\r\rDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setLabelSpanM":{"!description":"Sets a new value for property <code>labelSpanM<\/code>.\r\rDefault span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn(iLabelSpanM: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iLabelSpanM":"type: int, description: New value for property <code>labelSpanM<\/code>"}},"setSingleContainerFullSize":{"!description":"Sets a new value for property <code>singleContainerFullSize<\/code>.\r\rIf the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set,\nthe <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>.\nIn this case the properties <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bSingleContainerFullSize: Boolean) -> sap.ui.layout.form.SimpleForm","parameters":{"bSingleContainerFullSize":"type: boolean, description: New value for property <code>singleContainerFullSize<\/code>"}},"setLabelSpanS":{"!description":"Sets a new value for property <code>labelSpanS<\/code>.\r\rDefault span for labels in small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>12<\/code>.","!static":false,"!category":"function","!type":"fn(iLabelSpanS: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iLabelSpanS":"type: int, description: New value for property <code>labelSpanS<\/code>"}},"getLabelSpanL":{"!description":"Gets current value of property <code>labelSpanL<\/code>.\r\rDefault span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>4<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setEmptySpanM":{"!description":"Sets a new value for property <code>emptySpanM<\/code>.\r\rNumber of grid cells that are empty at the end of each line on medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iEmptySpanM: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iEmptySpanM":"type: int, description: New value for property <code>emptySpanM<\/code>"}},"getLabelSpanM":{"!description":"Gets current value of property <code>labelSpanM<\/code>.\r\rDefault span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"}},"getMaxContainerCols":{"!description":"Gets current value of property <code>maxContainerCols<\/code>.\r\rThe maximum amount of groups (<code>FormContainers<\/code>) per row that is used before a new row is started.\n\n<b>Note:<\/b> If a <code>ResponsiveGridLayout<\/code> is used as a <code>layout<\/code>, this property is not used. Please use the properties <code>ColumnsL<\/code> and <code>ColumnsM<\/code> in this case.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Element<\/code> in the aggregation <code>content<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Element) -> Number","parameters":{"oContent":"type: sap.ui.core.Element, description: The content whose index is looked for"}},"setAdjustLabelSpan":{"!description":"Sets a new value for property <code>adjustLabelSpan<\/code>.\r\rIf set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row.\nIf only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms<\/code>.\nThis is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code>\n(because every <code>FormContainer<\/code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size.\nThe number of <code>FormContainers<\/code> doesn't matter in this case.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bAdjustLabelSpan: Boolean) -> sap.ui.layout.form.SimpleForm","parameters":{"bAdjustLabelSpan":"type: boolean, description: New value for property <code>adjustLabelSpan<\/code>"}},"setEmptySpanS":{"!description":"Sets a new value for property <code>emptySpanS<\/code>.\r\rNumber of grid cells that are empty at the end of each line on small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iEmptySpanS: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iEmptySpanS":"type: int, description: New value for property <code>emptySpanS<\/code>"}},"removeAllContent":{"!description":"Removes all the controls from the aggregation <code>content<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Element]"},"getBreakpointXL":{"!description":"Gets current value of property <code>breakpointXL<\/code>.\r\rBreakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>1440<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"addContent":{"!description":"Adds some content to the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Element) -> sap.ui.layout.form.SimpleForm","parameters":{"oContent":"type: sap.ui.core.Element, description: the content to add; if empty, nothing is inserted"}},"setLabelMinWidth":{"!description":"Sets a new value for property <code>labelMinWidth<\/code>.\r\rSpecifies the min-width in pixels of the label in all form rows.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>192<\/code>.","!static":false,"!category":"function","!type":"fn(iLabelMinWidth: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iLabelMinWidth":"type: int, description: New value for property <code>labelMinWidth<\/code>"}},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\r\rWidth of the form.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.form.SimpleForm","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"getLabelSpanS":{"!description":"Gets current value of property <code>labelSpanS<\/code>.\r\rDefault span for labels in small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>12<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setEmptySpanL":{"!description":"Sets a new value for property <code>emptySpanL<\/code>.\r\rNumber of grid cells that are empty at the end of each line on large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iEmptySpanL: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iEmptySpanL":"type: int, description: New value for property <code>emptySpanL<\/code>"}},"setEditable":{"!description":"Sets a new value for property <code>editable<\/code>.\r\rApplies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(bEditable: Boolean) -> sap.ui.layout.form.SimpleForm","parameters":{"bEditable":"type: boolean, description: New value for property <code>editable<\/code>"}},"setToolbar":{"!description":"Sets the aggregated <code>toolbar<\/code>.","!static":false,"!category":"function","!type":"fn(oToolbar: sap.ui.core.Toolbar) -> sap.ui.layout.form.SimpleForm","parameters":{"oToolbar":"type: sap.ui.core.Toolbar, description: The toolbar to set"}},"destroyToolbar":{"!description":"Destroys the toolbar in the aggregation <code>toolbar<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.SimpleForm"},"setColumnsM":{"!description":"Sets a new value for property <code>columnsM<\/code>.\r\rForm columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn(iColumnsM: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iColumnsM":"type: int, description: New value for property <code>columnsM<\/code>"}},"destroyTitle":{"!description":"Destroys the title in the aggregation <code>title<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.SimpleForm"},"setColumnsL":{"!description":"Sets a new value for property <code>columnsL<\/code>.\r\rForm columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>2<\/code>.","!static":false,"!category":"function","!type":"fn(iColumnsL: Number) -> sap.ui.layout.form.SimpleForm","parameters":{"iColumnsL":"type: int, description: New value for property <code>columnsL<\/code>"}},"getSingleContainerFullSize":{"!description":"Gets current value of property <code>singleContainerFullSize<\/code>.\r\rIf the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set,\nthe <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>.\nIn this case the properties <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.layout.PaneContainer":{"!description":"PaneContainer is an abstraction of Splitter\nCould be used as an aggregation of ResponsiveSplitter or other PaneContainers.","getPanes":{"!description":"Gets content of aggregation <code>panes<\/code>.\r\rThe Pane that will be shown when there is no suitable pane for ResponsiveSplitter's current width.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Element]"},"setOrientation":{"!description":"Setter for property orientation.\nDefault value is sap.ui.core.Orientation.Horizontal","!static":false,"!category":"function","!type":"fn(sOrientation: sap.ui.core.Orientation) -> sap.ui.layout.PaneContainer","parameters":{"sOrientation":"type: sap.ui.core.Orientation, description: The Orientation type."}},"addPane":{"!description":"Adds some pane to the aggregation <code>panes<\/code>.","!static":false,"!category":"function","!type":"fn(oPane: sap.ui.core.Element) -> sap.ui.layout.PaneContainer","parameters":{"oPane":"type: sap.ui.core.Element, description: the pane to add; if empty, nothing is inserted"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.PaneContainer.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"removeAllPanes":{"!description":"Removes all the controls from the aggregation <code>panes<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Element]"},"!proto":"sap.ui.core.Element","!category":"class","setLayoutData":{"!description":"Setter for property layoutData.","!static":false,"!category":"function","!type":"fn(oLayoutData: sap.ui.core.LayoutData) -> sap.ui.layout.PaneContainer","parameters":{"oLayoutData":"type: sap.ui.core.LayoutData, description: The LayoutData object."}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.PaneContainer with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new PaneContainer.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getOrientation orientation} : sap.ui.core.Orientation (default: Horizontal)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getPanes panes} : sap.ui.core.Element[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","getOrientation":{"!description":"Gets current value of property <code>orientation<\/code>.\r\rThe orientation of the Splitter\r\rDefault value is <code>Horizontal<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Orientation"},"!module":"sap/ui/layout/PaneContainer","removePane":{"!description":"Removes a pane from the aggregation <code>panes<\/code>.","!static":false,"!category":"function","!type":"fn(vPane: Number | String | sap.ui.core.Element) -> sap.ui.core.Element","parameters":{"vPane":"type: int|string|sap.ui.core.Element, description: The pane to remove or its index or id"}},"!helpDescription":"PaneContainer is an abstraction of Splitter\nCould be used as an aggregation of ResponsiveSplitter or other PaneContainers.","insertPane":{"!description":"Pane insertion","!static":false,"!category":"function","!type":"fn(oObject: undefined) -> sap.ui.base.ManagedObject","parameters":{"oObject":"type: undefined, description: undefined"}},"destroyPanes":{"!description":"Destroys all the panes in the aggregation <code>panes<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.PaneContainer"},"indexOfPane":{"!description":"Checks for the provided <code>sap.ui.core.Element<\/code> in the aggregation <code>panes<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oPane: sap.ui.core.Element) -> Number","parameters":{"oPane":"type: sap.ui.core.Element, description: The pane whose index is looked for"}}},"sap.ui.layout.ResponsiveSplitter":{"!description":"ResponsiveSplitter is a control that enables responsiveness of normal Splitter.\nResponsiveSplitter consists of PaneContainers that further  agregate other PaneContainers and SplitPanes.\nSplitPanes can be moved to the pagination when a minimum width of their parent is reached.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.ResponsiveSplitter.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.core.Control","setDefaultPane":{"!description":"Sets the associated <code>defaultPane<\/code>.","!static":false,"!category":"function","!type":"fn(oDefaultPane: sap.ui.core.ID | sap.ui.layout.SplitPane) -> sap.ui.layout.ResponsiveSplitter","parameters":{"oDefaultPane":"type: sap.ui.core.ID|sap.ui.layout.SplitPane, description: ID of an element which becomes the new target of this defaultPane association; alternatively, an element instance may be given"}},"!category":"class","getWidth":{"!description":"Gets current value of property <code>width<\/code>.\r\rThe width of the control\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"setHeight":{"!description":"Sets a new value for property <code>height<\/code>.\r\rThe height of the control\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.layout.ResponsiveSplitter","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\r\rThe width of the control\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.ResponsiveSplitter","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"destroyRootPaneContainer":{"!description":"Destroys the rootPaneContainer in the aggregation <code>rootPaneContainer<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.ResponsiveSplitter"},"getRootPaneContainer":{"!description":"Gets content of aggregation <code>rootPaneContainer<\/code>.\r\rThe root PaneContainer of the ResponsiveSplitter","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.PaneContainer"},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveSplitter with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"setRootPaneContainer":{"!description":"Sets the aggregated <code>rootPaneContainer<\/code>.","!static":false,"!category":"function","!type":"fn(oRootPaneContainer: sap.ui.layout.PaneContainer) -> sap.ui.layout.ResponsiveSplitter","parameters":{"oRootPaneContainer":"type: sap.ui.layout.PaneContainer, description: The rootPaneContainer to set"}},"getHeight":{"!description":"Gets current value of property <code>height<\/code>.\r\rThe height of the control\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!constructorDescription":"Constructor for a new ResponsiveSplitter.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getRootPaneContainer rootPaneContainer} : sap.ui.layout.PaneContainer (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getDefaultPane defaultPane} : (sap.ui.core.ID | sap.ui.layout.SplitPane)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/ResponsiveSplitter","!helpDescription":"ResponsiveSplitter is a control that enables responsiveness of normal Splitter.\nResponsiveSplitter consists of PaneContainers that further  agregate other PaneContainers and SplitPanes.\nSplitPanes can be moved to the pagination when a minimum width of their parent is reached.","getDefaultPane":{"!description":"ID of the element which is the current target of the association <code>defaultPane<\/code>, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID"}},"sap.ui.layout.form.FormElement":{"!description":"A <code>FormElement<\/code> represents a row in a <code>FormContainer<\/code>.\nA <code>FormElement<\/code> is a combination of one label and different controls associated to this label.","setVisible":{"!description":"Sets a new value for property <code>visible<\/code>.\r\rIf set to <code>false<\/code>, the <code>FormElement<\/code> is not rendered.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisible: Boolean) -> sap.ui.layout.form.FormElement","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.FormElement.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"removeAllFields":{"!description":"Removes all the controls from the aggregation <code>fields<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"getLabel":{"!description":"Gets content of aggregation <code>label<\/code>.\r\rLabel of the fields. Can either be a <code>Label<\/code> control or a string.\nIf a <code>Label<\/code> control is used, the properties of the <code>Label<\/code> can be set.\nIf no assignment between <code>Label<\/code> and the fields is set via (<code>labelFor<\/code> property of the <code>Label<\/code>), it will be done automatically by the\n<code>FormElement<\/code>. In this case the <code>Label<\/code> is assigned to the fields of the <code>FormElement<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Label | String"},"getVisible":{"!description":"Gets current value of property <code>visible<\/code>.\r\rIf set to <code>false<\/code>, the <code>FormElement<\/code> is not rendered.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getLabelControl":{"!description":"Returns the <code>Label<\/code> of the <code>FormElement<\/code>, even if the <code>Label<\/code> is assigned as string.\nThe <code>FormLayout<\/code> needs the information of the label to render the <code>Form<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Label"},"!proto":"sap.ui.core.Element","addField":{"!description":"Adds some field to the aggregation <code>fields<\/code>.","!static":false,"!category":"function","!type":"fn(oField: sap.ui.core.Control) -> sap.ui.layout.form.FormElement","parameters":{"oField":"type: sap.ui.core.Control, description: the field to add; if empty, nothing is inserted"}},"!category":"class","removeField":{"!description":"Removes a field from the aggregation <code>fields<\/code>.","!static":false,"!category":"function","!type":"fn(vField: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vField":"type: int|string|sap.ui.core.Control, description: The field to remove or its index or id"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormElement with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new sap.ui.layout.form.FormElement.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getLabel label} : sap.ui.core.Label|string<\/li>\n<li>{@link #getFields fields} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","destroyFields":{"!description":"Destroys all the fields in the aggregation <code>fields<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.FormElement"},"getFields":{"!description":"Gets content of aggregation <code>fields<\/code>.\r\rFormular controls that belong together to be displayed in one row of a <code>Form<\/code>.\n\n<b>Note:<\/b> Do not put any layout controls in here. This could destroy the visual layout,\nkeyboard support and screen-reader support.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!module":"sap/ui/layout/form/FormElement","!helpDescription":"A <code>FormElement<\/code> represents a row in a <code>FormContainer<\/code>.\nA <code>FormElement<\/code> is a combination of one label and different controls associated to this label.","destroyLabel":{"!description":"Destroys the label in the aggregation <code>label<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.FormElement"},"indexOfField":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>fields<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oField: sap.ui.core.Control) -> Number","parameters":{"oField":"type: sap.ui.core.Control, description: The field whose index is looked for"}},"insertField":{"!description":"Inserts a field into the aggregation <code>fields<\/code>.","!static":false,"!category":"function","!type":"fn(oField: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.form.FormElement","parameters":{"iIndex":"type: int, description: the <code>0<\/code>-based index the field should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the field is inserted at position 0; for a value\r             greater than the current size of the aggregation, the field is inserted at\r             the last position","oField":"type: sap.ui.core.Control, description: the field to insert; if empty, nothing is inserted"}},"setLabel":{"!description":"Sets the aggregated <code>label<\/code>.","!static":false,"!category":"function","!type":"fn(vLabel: sap.ui.core.Label | String) -> sap.ui.layout.form.FormElement","parameters":{"vLabel":"type: sap.ui.core.Label|string, description: The label to set"}}},"sap.ui.layout.form.GridElementCells":{"!description":"A string that defines the number of used cells in a <code>GridLayout<\/code>. This can be a number from 1 to 16, \"auto\" or \"full\".\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above. <b>Note:<\/b> For labels full size has no effect.","!module":"sap/ui/layout/library","!helpDescription":"A string that defines the number of used cells in a <code>GridLayout<\/code>. This can be a number from 1 to 16, \"auto\" or \"full\".\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above. <b>Note:<\/b> For labels full size has no effect.","!category":"namespace"},"sap.ui.layout.DynamicSideContent":{"setContainerQuery":{"!description":"Sets a new value for property <code>containerQuery<\/code>.\r\rIf set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bContainerQuery: Boolean) -> sap.ui.layout.DynamicSideContent","parameters":{"bContainerQuery":"type: boolean, description: New value for property <code>containerQuery<\/code>"}},"setEqualSplit":{"!description":"Sets or unsets the page in equalSplit mode.","!static":false,"!category":"function","!type":"fn(bState?: Boolean) -> sap.ui.layout.DynamicSideContent","parameters":{"bState":"type: boolean, description: Determines if the page is set to equalSplit mode"}},"getMainContent":{"!description":"Gets content of aggregation <code>mainContent<\/code>.\r\rMain content controls.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"removeAllMainContent":{"!description":"Removes all the controls from the aggregation <code>mainContent<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.core.Control","!category":"class","indexOfSideContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>sideContent<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oSideContent: sap.ui.core.Control) -> Number","parameters":{"oSideContent":"type: sap.ui.core.Control, description: The sideContent whose index is looked for"}},"destroySideContent":{"!description":"Destroys all the sideContent in the aggregation <code>sideContent<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.DynamicSideContent"},"detachBreakpointChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>breakpointChanged<\/code> event of this <code>sap.ui.layout.DynamicSideContent<\/code>.\r\rThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.layout.DynamicSideContent","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"removeAllSideContent":{"!description":"Removes all the controls from the aggregation <code>sideContent<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"setSideContentVisibility":{"!description":"Sets a new value for property <code>sideContentVisibility<\/code>.\r\rDetermines on which breakpoints the side content is visible.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>ShowAboveS<\/code>.","!static":false,"!category":"function","!type":"fn(sSideContentVisibility: sap.ui.layout.SideContentVisibility) -> sap.ui.layout.DynamicSideContent","parameters":{"sSideContentVisibility":"type: sap.ui.layout.SideContentVisibility, description: New value for property <code>sideContentVisibility<\/code>"}},"!constructorDescription":"Constructor for a new <code>DynamicSideContent<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getShowSideContent showSideContent} : boolean (default: true)<\/li>\n<li>{@link #getShowMainContent showMainContent} : boolean (default: true)<\/li>\n<li>{@link #getSideContentVisibility sideContentVisibility} : sap.ui.layout.SideContentVisibility (default: ShowAboveS)<\/li>\n<li>{@link #getSideContentFallDown sideContentFallDown} : sap.ui.layout.SideContentFallDown (default: OnMinimumWidth)<\/li>\n<li>{@link #getEqualSplit equalSplit} : boolean (default: false)<\/li>\n<li>{@link #getContainerQuery containerQuery} : boolean (default: false)<\/li>\n<li>{@link #getSideContentPosition sideContentPosition} : sap.ui.layout.SideContentPosition (default: End)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getMainContent mainContent} : sap.ui.core.Control[] (default)<\/li>\n<li>{@link #getSideContent sideContent} : sap.ui.core.Control[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:breakpointChanged breakpointChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getSideContentVisibility":{"!description":"Gets current value of property <code>sideContentVisibility<\/code>.\r\rDetermines on which breakpoints the side content is visible.\r\rDefault value is <code>ShowAboveS<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.SideContentVisibility"},"getShowSideContent":{"!description":"Gets the value of showSideContent property.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getSideContentFallDown":{"!description":"Gets current value of property <code>sideContentFallDown<\/code>.\r\rDetermines on which breakpoints the side content falls down below the main content.\r\rDefault value is <code>OnMinimumWidth<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.SideContentFallDown"},"getEqualSplit":{"!description":"Gets current value of property <code>equalSplit<\/code>.\r\rDefines whether the control is in equal split mode. In this mode, the side and the main content\ntake 50:50 percent of the container on all screen sizes except for phone, where the main and\nside contents are switching visibility using the toggle method.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"indexOfMainContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>mainContent<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oMainContent: sap.ui.core.Control) -> Number","parameters":{"oMainContent":"type: sap.ui.core.Control, description: The mainContent whose index is looked for"}},"getShowMainContent":{"!description":"Gets the value of showMainContent property.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getSideContent":{"!description":"Gets content of aggregation <code>sideContent<\/code>.\r\rSide content controls.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!description":"Layout control that allows additional (side) content to be displayed dynamically.\n\n<h3>Overview<\/h3>\n\n<code>DynamicSideContent<\/code> is a layout control that allows additional content\nto be displayed in a way that flexibly adapts to different screen sizes. The side\ncontent appears in a container next to or directly below the main content\n(it doesn't overlay). When the side content is triggered, the main content becomes\nnarrower (if appearing side-by-side). The side content contains a separate scrollbar\nwhen appearing next to the main content.\n\n<h3>Usage<\/h3>\n\n<i>When to use?<\/i>\n\nUse this control if you want to display relevant information that is not critical\nfor users to complete a task. Users should have access to all the key functions and\ncritical information in the app even if they do not see the side content. This is\nimportant because on smaller screen sizes it may be difficult to display the side\ncontent in a way that is easily accessible for the user.\n\n<i>When not to use?<\/i>\n\nDon't use it if you want to display navigation or critical information that prevents\nusers from completing a task when they have no access to the side content.\n\n<h3>Responsive Behavior<\/h3>\n\nScreen width > 1440 px\n\n<ul><li>Main vs. side content ratio is 75 vs. 25 percent (with a minimum of 320px\neach).<\/li>\n<li>If the application defines a trigger, the side content can be hidden.<\/li><\/ul>\n\nScreen width <= 1440 px and > 720px\n\n<ul><li>Main vs. side content ratio is 66.666 vs. 33.333 percent (with a minimum of\n320px each). If the side content width falls below 320 px, it automatically slides\nunder the main content, unless the app development team specifies that it should\ndisappear.<\/li><\/ul>\n\nScreen width <= 720 px (for example on a mobile device)\n\n<ul><li>In this case, the side content automatically disappears from the screen (unless\nspecified to stay under the content) and can be triggered from a pre-set trigger\n(specified within the app). When the side content is triggered, it replaces the\nmain content. We recommend that you always place the trigger for the side content\nin the same location, such as in the app footer.<\/li><\/ul>\n\nA special case, allows for comparison mode between the main and side content. In\nthis case, the screen is split into 50:50 percent for main vs. side content. The\nresponsive behavior of the equal split is the same as in the standard view - the\nside content disappears on screen widths of less than 720 px and can only be\nviewed by triggering it.","insertSideContent":{"!description":"Inserts a sideContent into the aggregation <code>sideContent<\/code>.","!static":false,"!category":"function","!type":"fn(oSideContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.DynamicSideContent","parameters":{"iIndex":"type: int, description: the <code>0<\/code>-based index the sideContent should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the sideContent is inserted at position 0; for a value\r             greater than the current size of the aggregation, the sideContent is inserted at\r             the last position","oSideContent":"type: sap.ui.core.Control, description: the sideContent to insert; if empty, nothing is inserted"}},"addSideContent":{"!description":"Adds a control to the side content area.\nOnly the side content part in the aggregation is re-rendered.","!static":false,"!category":"function","!type":"fn(oControl: Object) -> sap.ui.layout.DynamicSideContent","parameters":{"oControl":"type: object, description: Object to be added in the aggregation"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.DynamicSideContent.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"addMainContent":{"!description":"Adds a control to the main content area.\nOnly the main content part in the aggregation is re-rendered.","!static":false,"!category":"function","!type":"fn(oControl: Object) -> sap.ui.layout.DynamicSideContent","parameters":{"oControl":"type: object, description: Object to be added in the aggregation"}},"insertMainContent":{"!description":"Inserts a mainContent into the aggregation <code>mainContent<\/code>.","!static":false,"!category":"function","!type":"fn(oMainContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.DynamicSideContent","parameters":{"oMainContent":"type: sap.ui.core.Control, description: the mainContent to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the mainContent should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the mainContent is inserted at position 0; for a value\r             greater than the current size of the aggregation, the mainContent is inserted at\r             the last position"}},"getSideContentPosition":{"!description":"Gets current value of property <code>sideContentPosition<\/code>.\r\rDetermines whether the side content is on the left or on the right side of the main content.\r\rDefault value is <code>End<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.SideContentPosition"},"setShowMainContent":{"!description":"Sets the showMainContent property.","!static":false,"!category":"function","!type":"fn(bVisible: Boolean, bSuppressVisualUpdate: Boolean) -> sap.ui.layout.DynamicSideContent","parameters":{"bSuppressVisualUpdate":"type: boolean, description: Determines if the visual state is updated","bVisible":"type: boolean, description: Determines if the main content part is visible"}},"toggle":{"!description":"Used for the toggle button functionality.\nWhen the control is on a phone screen size only, one control area is visible.\nThis helper method is used to implement a button/switch for changing\nbetween the main and side content areas.\nOnly works if the current breakpoint is \"S\".","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.DynamicSideContent"},"setSideContentFallDown":{"!description":"Sets a new value for property <code>sideContentFallDown<\/code>.\r\rDetermines on which breakpoints the side content falls down below the main content.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>OnMinimumWidth<\/code>.","!static":false,"!category":"function","!type":"fn(sSideContentFallDown: sap.ui.layout.SideContentFallDown) -> sap.ui.layout.DynamicSideContent","parameters":{"sSideContentFallDown":"type: sap.ui.layout.SideContentFallDown, description: New value for property <code>sideContentFallDown<\/code>"}},"getContainerQuery":{"!description":"Gets current value of property <code>containerQuery<\/code>.\r\rIf set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setShowSideContent":{"!description":"Sets the showSideContent property.","!static":false,"!category":"function","!type":"fn(bVisible: Boolean, bSuppressVisualUpdate: Boolean) -> sap.ui.layout.DynamicSideContent","parameters":{"bSuppressVisualUpdate":"type: boolean, description: Determines if the visual state is updated","bVisible":"type: boolean, description: Determines if the side content part is visible"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.DynamicSideContent with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/layout/DynamicSideContent","removeSideContent":{"!description":"Removes a sideContent from the aggregation <code>sideContent<\/code>.","!static":false,"!category":"function","!type":"fn(vSideContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vSideContent":"type: int|string|sap.ui.core.Control, description: The sideContent to remove or its index or id"}},"!helpDescription":"Layout control that allows additional (side) content to be displayed dynamically.\n\n<h3>Overview<\/h3>\n\n<code>DynamicSideContent<\/code> is a layout control that allows additional content\nto be displayed in a way that flexibly adapts to different screen sizes. The side\ncontent appears in a container next to or directly below the main content\n(it doesn't overlay). When the side content is triggered, the main content becomes\nnarrower (if appearing side-by-side). The side content contains a separate scrollbar\nwhen appearing next to the main content.\n\n<h3>Usage<\/h3>\n\n<i>When to use?<\/i>\n\nUse this control if you want to display relevant information that is not critical\nfor users to complete a task. Users should have access to all the key functions and\ncritical information in the app even if they do not see the side content. This is\nimportant because on smaller screen sizes it may be difficult to display the side\ncontent in a way that is easily accessible for the user.\n\n<i>When not to use?<\/i>\n\nDon't use it if you want to display navigation or critical information that prevents\nusers from completing a task when they have no access to the side content.\n\n<h3>Responsive Behavior<\/h3>\n\nScreen width > 1440 px\n\n<ul><li>Main vs. side content ratio is 75 vs. 25 percent (with a minimum of 320px\neach).<\/li>\n<li>If the application defines a trigger, the side content can be hidden.<\/li><\/ul>\n\nScreen width <= 1440 px and > 720px\n\n<ul><li>Main vs. side content ratio is 66.666 vs. 33.333 percent (with a minimum of\n320px each). If the side content width falls below 320 px, it automatically slides\nunder the main content, unless the app development team specifies that it should\ndisappear.<\/li><\/ul>\n\nScreen width <= 720 px (for example on a mobile device)\n\n<ul><li>In this case, the side content automatically disappears from the screen (unless\nspecified to stay under the content) and can be triggered from a pre-set trigger\n(specified within the app). When the side content is triggered, it replaces the\nmain content. We recommend that you always place the trigger for the side content\nin the same location, such as in the app footer.<\/li><\/ul>\n\nA special case, allows for comparison mode between the main and side content. In\nthis case, the screen is split into 50:50 percent for main vs. side content. The\nresponsive behavior of the equal split is the same as in the standard view - the\nside content disappears on screen widths of less than 720 px and can only be\nviewed by triggering it.","getCurrentBreakpoint":{"!description":"Returns the breakpoint for the current state of the control.","!static":false,"!category":"function","!type":"fn() -> String"},"destroyMainContent":{"!description":"Destroys all the mainContent in the aggregation <code>mainContent<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.DynamicSideContent"},"attachBreakpointChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>breakpointChanged<\/code> event of this <code>sap.ui.layout.DynamicSideContent<\/code>.\r\rWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \rotherwise it will be bound to this <code>sap.ui.layout.DynamicSideContent<\/code> itself.\r\rFires when the current breakpoint has been changed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.layout.DynamicSideContent","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.layout.DynamicSideContent<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireBreakpointChanged":{"!description":"Fires event <code>breakpointChanged<\/code> to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.layout.DynamicSideContent","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"removeMainContent":{"!description":"Removes a mainContent from the aggregation <code>mainContent<\/code>.","!static":false,"!category":"function","!type":"fn(vMainContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vMainContent":"type: int|string|sap.ui.core.Control, description: The mainContent to remove or its index or id"}},"setSideContentPosition":{"!description":"Sets a new value for property <code>sideContentPosition<\/code>.\r\rDetermines whether the side content is on the left or on the right side of the main content.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>End<\/code>.","!static":false,"!category":"function","!type":"fn(sSideContentPosition: sap.ui.layout.SideContentPosition) -> sap.ui.layout.DynamicSideContent","parameters":{"sSideContentPosition":"type: sap.ui.layout.SideContentPosition, description: New value for property <code>sideContentPosition<\/code>"}}},"sap.ui.layout.ResponsiveFlowLayout":{"!description":"This is a layout where several controls can be added. These controls are blown up to fit in an entire row. If the window resizes, the controls are moved between the rows and resized again.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.ResponsiveFlowLayout.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>content<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> Number","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"}},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\r\rAdded content that should be positioned. Every content item should have a ResponsiveFlowLayoutData attached, or otherwise, the default values are used.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.core.Control","removeAllContent":{"!description":"Removes all the controls from the aggregation <code>content<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"getResponsive":{"!description":"Gets current value of property <code>responsive<\/code>.\r\rIf set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!category":"class","addContent":{"!description":"Adds content.\nThis function needs to be overridden to prevent any rendering while some\ncontent is still being added.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control)","parameters":{"oContent":"type: sap.ui.core.Control, description: The content that should be added to the layout"}},"removeContent":{"!description":"Removes content.\nThis function needs to be overridden to prevent any rendering while some\ncontent is still being added.","!static":false,"!category":"function","!type":"fn(oContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"oContent":"type: int|string|sap.ui.core.Control, description: The content that should be removed from the layout"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new ResponsiveFlowLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getResponsive responsive} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/ResponsiveFlowLayout","!helpDescription":"This is a layout where several controls can be added. These controls are blown up to fit in an entire row. If the window resizes, the controls are moved between the rows and resized again.","insertContent":{"!description":"Inserts content.\nThis function needs to be overridden to prevent any rendering while some\ncontent is still being added.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number)","parameters":{"oContent":"type: sap.ui.core.Control, description: The content that should be inserted to the layout","iIndex":"type: int, description: The index where the content should be inserted into"}},"destroyContent":{"!description":"Destroys all the content in the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.ResponsiveFlowLayout"},"setResponsive":{"!description":"Sets a new value for property <code>responsive<\/code>.\r\rIf set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bResponsive: Boolean) -> sap.ui.layout.ResponsiveFlowLayout","parameters":{"bResponsive":"type: boolean, description: New value for property <code>responsive<\/code>"}}},"sap.ui.layout.SideContentPosition":{"!description":"The position of the side content - End (default) and Begin.","!module":"sap/ui/layout/library","Begin":{"!description":"The side content is on the left side of the main container in left-to-right mode and on the right side in right-to-left mode.","!category":"enum","!type":"String"},"!category":"static class","End":{"!description":"The side content is on the right side of the main container in left-to-right mode and on the left side in right-to-left mode.","!category":"enum","!type":"String"}},"sap.ui.layout.BackgroundDesign":{"!description":"Available Background Design.","!module":"sap/ui/layout/library","Transparent":{"!description":"Transparent background.","!category":"enum","!type":"String"},"!category":"static class","Translucent":{"!description":"A translucent background depending on the opacity value of the theme.","!category":"enum","!type":"String"},"Solid":{"!description":"A solid background color dependent on the theme.","!category":"enum","!type":"String"}},"sap.ui.layout.BlockBackgroundType":{"!description":"A string type that is used inside the BlockLayout to set predefined background color to the cells inside\nthe control.","!module":"sap/ui/layout/library","Mixed":{"!description":"Background with bright and dark background colors","!category":"enum","!type":"String"},"Accent":{"!description":"Background with pre-defined accent colors","!category":"enum","!type":"String"},"Light":{"!description":"Background is with predefined light colors","!category":"enum","!type":"String"},"Dashboard":{"!description":"For applications that want to make use of e.g. charts in the Blocks, this layout type has spacings around the Blocks","!category":"enum","!type":"String"},"!category":"static class","Default":{"!description":"Background is transparent","!category":"enum","!type":"String"}},"sap.ui.layout.form.FormLayout":{"!description":"Base layout to render a <code>Form<\/code>.\nOther layouts to render a <code>Form<\/code> must inherit from this one.\n\n<b>Note:<\/b> This control must not be used to render a <code>Form<\/code> in productive applications as it does not fulfill any\ndesign guidelines and usability standards.","extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.FormLayout.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new sap.ui.layout.form.FormLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getBackgroundDesign backgroundDesign} : sap.ui.layout.BackgroundDesign (default: Translucent)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/form/FormLayout","!helpDescription":"Base layout to render a <code>Form<\/code>.\nOther layouts to render a <code>Form<\/code> must inherit from this one.\n\n<b>Note:<\/b> This control must not be used to render a <code>Form<\/code> in productive applications as it does not fulfill any\ndesign guidelines and usability standards.","!proto":"sap.ui.core.Control","getBackgroundDesign":{"!description":"Gets current value of property <code>backgroundDesign<\/code>.\r\rSpecifies the background color of the <code>Form<\/code> content.\n\n<b>Note:<\/b> The visualization of the different options depends on the theme used.\r\rDefault value is <code>Translucent<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.BackgroundDesign"},"setBackgroundDesign":{"!description":"Sets a new value for property <code>backgroundDesign<\/code>.\r\rSpecifies the background color of the <code>Form<\/code> content.\n\n<b>Note:<\/b> The visualization of the different options depends on the theme used.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>Translucent<\/code>.","!static":false,"!category":"function","!type":"fn(sBackgroundDesign: sap.ui.layout.BackgroundDesign) -> sap.ui.layout.form.FormLayout","parameters":{"sBackgroundDesign":"type: sap.ui.layout.BackgroundDesign, description: New value for property <code>backgroundDesign<\/code>"}},"!category":"class"},"sap.ui.layout.form.GridLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.GridLayout"},"sap.ui.layout.DynamicSideContent_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.DynamicSideContent with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.DynamicSideContent"},"sap.ui.layout.GridData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.GridData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.GridData"},"sap.ui.layout.VerticalLayout":{"!description":"In this layout the content controls are rendered one below the other.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.VerticalLayout.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getAccessibilityInfo":{"!static":false,"!category":"function","!type":"fn()"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>content<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> Number","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"}},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\r\rContent controls within the layout.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.core.Control","removeAllContent":{"!description":"Removes all the controls from the aggregation <code>content<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!category":"class","getWidth":{"!description":"Gets current value of property <code>width<\/code>.\r\rWidth of the <code>VerticalLayout<\/code>. If no width is set, the width of the content is used.\nIf the content of the layout has a larger width than the layout, it is cut off.\nThere is no scrolling inside the layout.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"addContent":{"!description":"Adds some content to the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.VerticalLayout","parameters":{"oContent":"type: sap.ui.core.Control, description: the content to add; if empty, nothing is inserted"}},"removeContent":{"!description":"Removes a content from the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.VerticalLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"setEnabled":{"!description":"Sets a new value for property <code>enabled<\/code>.\r\rIf not enabled, all controls inside are not enabled automatically.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bEnabled: Boolean) -> sap.ui.layout.VerticalLayout","parameters":{"bEnabled":"type: boolean, description: New value for property <code>enabled<\/code>"}},"!constructorDescription":"Constructor for a new VerticalLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEnabled enabled} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/VerticalLayout","!helpDescription":"In this layout the content controls are rendered one below the other.","getEnabled":{"!description":"Gets current value of property <code>enabled<\/code>.\r\rIf not enabled, all controls inside are not enabled automatically.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"insertContent":{"!description":"Inserts a content into the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.VerticalLayout","parameters":{"oContent":"type: sap.ui.core.Control, description: the content to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the content should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value\r             greater than the current size of the aggregation, the content is inserted at\r             the last position"}},"destroyContent":{"!description":"Destroys all the content in the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.VerticalLayout"}},"sap.ui.layout.FixFlex_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.FixFlex with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.FixFlex"},"sap.ui.layout.SplitterLayoutData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.SplitterLayoutData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.SplitterLayoutData"},"sap.ui.layout.FixFlex":{"getFixFirst":{"!description":"Gets current value of property <code>fixFirst<\/code>.\r\rDetermines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or beginning/bottom ( if the value is \"false\").\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"indexOfFixContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>fixContent<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oFixContent: sap.ui.core.Control) -> Number","parameters":{"oFixContent":"type: sap.ui.core.Control, description: The fixContent whose index is looked for"}},"!proto":"sap.ui.core.Control","getFixContent":{"!description":"Gets content of aggregation <code>fixContent<\/code>.\r\rControls in the fixed part of the layout.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!category":"class","getFixContentSize":{"!description":"Gets current value of property <code>fixContentSize<\/code>.\r\rDetermines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.\r\rDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"removeFixContent":{"!description":"Removes a fixContent from the aggregation <code>fixContent<\/code>.","!static":false,"!category":"function","!type":"fn(vFixContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vFixContent":"type: int|string|sap.ui.core.Control, description: The fixContent to remove or its index or id"}},"!constructorDescription":"Constructor for a new FixFlex.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getVertical vertical} : boolean (default: true)<\/li>\n<li>{@link #getFixFirst fixFirst} : boolean (default: true)<\/li>\n<li>{@link #getFixContentSize fixContentSize} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getMinFlexSize minFlexSize} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getFixContent fixContent} : sap.ui.core.Control[]<\/li>\n<li>{@link #getFlexContent flexContent} : sap.ui.core.Control<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setFixFirst":{"!description":"Sets a new value for property <code>fixFirst<\/code>.\r\rDetermines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or beginning/bottom ( if the value is \"false\").\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bFixFirst: Boolean) -> sap.ui.layout.FixFlex","parameters":{"bFixFirst":"type: boolean, description: New value for property <code>fixFirst<\/code>"}},"destroyFlexContent":{"!description":"Destroys the flexContent in the aggregation <code>flexContent<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.FixFlex"},"getMinFlexSize":{"!description":"Gets current value of property <code>minFlexSize<\/code>.\r\rEnables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"!description":"The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container. The fix container can hold any number of controls, while the flexible container can hold only one.\n\nIn order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.\n\nWarning: Avoid nesting FixFlex in other flexbox based layout controls (FixFlex, FlexBox, Hbox, Vbox). Otherwise contents may be not accessible or multiple scrollbars can appear.\n\nNote: If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view. If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the vertical property.","setFixContentSize":{"!description":"Sets a new value for property <code>fixContentSize<\/code>.\r\rDetermines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn(sFixContentSize: sap.ui.core.CSSSize) -> sap.ui.layout.FixFlex","parameters":{"sFixContentSize":"type: sap.ui.core.CSSSize, description: New value for property <code>fixContentSize<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.FixFlex.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"addFixContent":{"!description":"Adds some fixContent to the aggregation <code>fixContent<\/code>.","!static":false,"!category":"function","!type":"fn(oFixContent: sap.ui.core.Control) -> sap.ui.layout.FixFlex","parameters":{"oFixContent":"type: sap.ui.core.Control, description: the fixContent to add; if empty, nothing is inserted"}},"getFlexContent":{"!description":"Gets content of aggregation <code>flexContent<\/code>.\r\rControl in the stretching part of the layout.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"destroyFixContent":{"!description":"Destroys all the fixContent in the aggregation <code>fixContent<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.FixFlex"},"setFlexContent":{"!description":"Sets the aggregated <code>flexContent<\/code>.","!static":false,"!category":"function","!type":"fn(oFlexContent: sap.ui.core.Control) -> sap.ui.layout.FixFlex","parameters":{"oFlexContent":"type: sap.ui.core.Control, description: The flexContent to set"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.FixFlex with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"insertFixContent":{"!description":"Inserts a fixContent into the aggregation <code>fixContent<\/code>.","!static":false,"!category":"function","!type":"fn(oFixContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.FixFlex","parameters":{"iIndex":"type: int, description: the <code>0<\/code>-based index the fixContent should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the fixContent is inserted at position 0; for a value\r             greater than the current size of the aggregation, the fixContent is inserted at\r             the last position","oFixContent":"type: sap.ui.core.Control, description: the fixContent to insert; if empty, nothing is inserted"}},"!module":"sap/ui/layout/FixFlex","!helpDescription":"The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container. The fix container can hold any number of controls, while the flexible container can hold only one.\n\nIn order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.\n\nWarning: Avoid nesting FixFlex in other flexbox based layout controls (FixFlex, FlexBox, Hbox, Vbox). Otherwise contents may be not accessible or multiple scrollbars can appear.\n\nNote: If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view. If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the vertical property.","setVertical":{"!description":"Sets a new value for property <code>vertical<\/code>.\r\rDetermines the direction of the layout of child elements. True for vertical and false for horizontal layout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVertical: Boolean) -> sap.ui.layout.FixFlex","parameters":{"bVertical":"type: boolean, description: New value for property <code>vertical<\/code>"}},"removeAllFixContent":{"!description":"Removes all the controls from the aggregation <code>fixContent<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"setMinFlexSize":{"!description":"Sets a new value for property <code>minFlexSize<\/code>.\r\rEnables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iMinFlexSize: Number) -> sap.ui.layout.FixFlex","parameters":{"iMinFlexSize":"type: int, description: New value for property <code>minFlexSize<\/code>"}},"getVertical":{"!description":"Gets current value of property <code>vertical<\/code>.\r\rDetermines the direction of the layout of child elements. True for vertical and false for horizontal layout.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.layout.ResponsiveSplitter_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveSplitter with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.ResponsiveSplitter"},"sap.ui.layout.form.ResponsiveLayout":{"!description":"The <code>ResponsiveLayout<\/code> renders a <code>Form<\/code> with a responsive layout. Internally the <code>ResponsiveFlowLayout<\/code> is used.\nThe responsiveness of this layout tries to best use the available space. This means that the order of the <code>FormContainers<\/code>, labels and fields depends on the available space.\n\nOn the <code>FormContainers<\/code>, <code>FormElements<\/code>, labels and content fields, <code>ResponsiveFlowLayoutData<\/code> can be used to change the default rendering.\n\nWe suggest using the <code>ResponsiveGridLayout<\/code> instead of this layout because this is easier to consume and brings more stable responsive output.\n\n<b>Note:<\/b> If <code>ResponsiveFlowLayoutData<\/code> are used this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result.\nIn such cases, <code>ResponsiveFlowLayoutData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.ResponsiveLayout.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new sap.ui.layout.form.ResponsiveLayout.","!module":"sap/ui/layout/form/ResponsiveLayout","!helpDescription":"The <code>ResponsiveLayout<\/code> renders a <code>Form<\/code> with a responsive layout. Internally the <code>ResponsiveFlowLayout<\/code> is used.\nThe responsiveness of this layout tries to best use the available space. This means that the order of the <code>FormContainers<\/code>, labels and fields depends on the available space.\n\nOn the <code>FormContainers<\/code>, <code>FormElements<\/code>, labels and content fields, <code>ResponsiveFlowLayoutData<\/code> can be used to change the default rendering.\n\nWe suggest using the <code>ResponsiveGridLayout<\/code> instead of this layout because this is easier to consume and brings more stable responsive output.\n\n<b>Note:<\/b> If <code>ResponsiveFlowLayoutData<\/code> are used this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result.\nIn such cases, <code>ResponsiveFlowLayoutData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","!proto":"sap.ui.layout.form.FormLayout","!category":"class"},"sap.ui.layout.BlockLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.BlockLayout"},"sap.ui.layout.BlockLayoutRow":{"!description":"The BlockLayoutRow is used as an aggregation to the BlockLayout. It aggregates Block Layout  cells.\nThe BlockLayoutRow has 2 rendering modes - scrollable and non scrollable.","getAccentCells":{"!description":"Returns array of IDs of the elements which are the current targets of the association <code>accentCells<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.BlockLayoutRow.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"removeAllAccentCells":{"!description":"Removes all the controls in the association named <code>accentCells<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.layout.BlockLayoutCell<\/code> in the aggregation <code>content<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.layout.BlockLayoutCell) -> Number","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutCell, description: The content whose index is looked for"}},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\r\rThe content cells to be included in the row.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.layout.BlockLayoutCell]"},"getScrollable":{"!description":"Gets current value of property <code>scrollable<\/code>.\r\rSets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get\naligned side by side, with horizontal scroll bar for the row.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.core.Control","removeAllContent":{"!description":"Removes all the controls from the aggregation <code>content<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.layout.BlockLayoutCell]"},"!category":"class","addContent":{"!description":"Adds some content to the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.layout.BlockLayoutCell) -> sap.ui.layout.BlockLayoutRow","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutCell, description: the content to add; if empty, nothing is inserted"}},"removeContent":{"!description":"Removes a content from the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.layout.BlockLayoutCell) -> sap.ui.layout.BlockLayoutCell","parameters":{"vContent":"type: int|string|sap.ui.layout.BlockLayoutCell, description: The content to remove or its index or id"}},"removeAccentCell":{"!description":"Removes an accentCell from the association named <code>accentCells<\/code>.","!static":false,"!category":"function","!type":"fn(vAccentCell: Number | sap.ui.core.ID | sap.ui.layout.BlockLayoutCell) -> sap.ui.core.ID","parameters":{"vAccentCell":"type: int|sap.ui.core.ID|sap.ui.layout.BlockLayoutCell, description: The accentCell to be removed or its index or ID"}},"addAccentCell":{"!description":"Adds some accentCell into the association <code>accentCells<\/code>.","!static":false,"!category":"function","!type":"fn(vAccentCell: sap.ui.core.ID | sap.ui.layout.BlockLayoutCell) -> sap.ui.layout.BlockLayoutRow","parameters":{"vAccentCell":"type: sap.ui.core.ID|sap.ui.layout.BlockLayoutCell, description: the accentCells to add; if empty, nothing is inserted"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutRow with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new BlockLayoutRow.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getScrollable scrollable} : boolean (default: false)<\/li>\n<li>{@link #getRowColorSet rowColorSet} : sap.ui.layout.BlockRowColorSets<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.layout.BlockLayoutCell[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAccentCells accentCells} : (sap.ui.core.ID | sap.ui.layout.BlockLayoutCell)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/BlockLayoutRow","!helpDescription":"The BlockLayoutRow is used as an aggregation to the BlockLayout. It aggregates Block Layout  cells.\nThe BlockLayoutRow has 2 rendering modes - scrollable and non scrollable.","getRowColorSet":{"!description":"Gets current value of property <code>rowColorSet<\/code>.\r\rDefines background type for that row.\nThere might be several rows with the same type","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.BlockRowColorSets"},"setScrollable":{"!description":"Sets a new value for property <code>scrollable<\/code>.\r\rSets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get\naligned side by side, with horizontal scroll bar for the row.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bScrollable: Boolean) -> sap.ui.layout.BlockLayoutRow","parameters":{"bScrollable":"type: boolean, description: New value for property <code>scrollable<\/code>"}},"insertContent":{"!description":"Inserts a content into the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.layout.BlockLayoutCell, iIndex: Number) -> sap.ui.layout.BlockLayoutRow","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutCell, description: the content to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the content should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value\r             greater than the current size of the aggregation, the content is inserted at\r             the last position"}},"destroyContent":{"!description":"Destroys all the content in the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.BlockLayoutRow"}},"sap.ui.layout.GridSpan":{"!description":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large  medium  small.","!module":"sap/ui/layout/library","!helpDescription":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large  medium  small.","!category":"namespace"},"sap.ui.layout.ResponsiveFlowLayoutData":{"!description":"This is a LayoutData element that can be added to a control if this control is used within a ResponsiveFlowLayout.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.ResponsiveFlowLayoutData.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getWeight":{"!description":"Gets current value of property <code>weight<\/code>.\r\rDefines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getMargin":{"!description":"Gets current value of property <code>margin<\/code>.\r\rPrevents any margin of the element if set to false.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setMinWidth":{"!description":"Sets a new value for property <code>minWidth<\/code>.\r\rDefines the minimal size in px of an ResponsiveFlowLayout element. The element will be shrunk down to this value.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>100<\/code>.","!static":false,"!category":"function","!type":"fn(iMinWidth: Number) -> sap.ui.layout.ResponsiveFlowLayoutData","parameters":{"iMinWidth":"type: int, description: New value for property <code>minWidth<\/code>"}},"setWeight":{"!description":"Sets a new value for property <code>weight<\/code>.\r\rDefines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn(iWeight: Number) -> sap.ui.layout.ResponsiveFlowLayoutData","parameters":{"iWeight":"type: int, description: New value for property <code>weight<\/code>"}},"!proto":"sap.ui.core.LayoutData","getLinebreakable":{"!description":"Gets current value of property <code>linebreakable<\/code>.\r\rShows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setMargin":{"!description":"Sets a new value for property <code>margin<\/code>.\r\rPrevents any margin of the element if set to false.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bMargin: Boolean) -> sap.ui.layout.ResponsiveFlowLayoutData","parameters":{"bMargin":"type: boolean, description: New value for property <code>margin<\/code>"}},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayoutData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getMinWidth":{"!description":"Gets current value of property <code>minWidth<\/code>.\r\rDefines the minimal size in px of an ResponsiveFlowLayout element. The element will be shrunk down to this value.\r\rDefault value is <code>100<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"!constructorDescription":"Constructor for a new ResponsiveFlowLayoutData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getMinWidth minWidth} : int (default: 100)<\/li>\n<li>{@link #getWeight weight} : int (default: 1)<\/li>\n<li>{@link #getLinebreak linebreak} : boolean (default: false)<\/li>\n<li>{@link #getMargin margin} : boolean (default: true)<\/li>\n<li>{@link #getLinebreakable linebreakable} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","!module":"sap/ui/layout/ResponsiveFlowLayoutData","!helpDescription":"This is a LayoutData element that can be added to a control if this control is used within a ResponsiveFlowLayout.","setLinebreak":{"!description":"Sets a new value for property <code>linebreak<\/code>.\r\rIf this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bLinebreak: Boolean) -> sap.ui.layout.ResponsiveFlowLayoutData","parameters":{"bLinebreak":"type: boolean, description: New value for property <code>linebreak<\/code>"}},"getLinebreak":{"!description":"Gets current value of property <code>linebreak<\/code>.\r\rIf this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setLinebreakable":{"!description":"Sets a new value for property <code>linebreakable<\/code>.\r\rShows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bLinebreakable: Boolean) -> sap.ui.layout.ResponsiveFlowLayoutData","parameters":{"bLinebreakable":"type: boolean, description: New value for property <code>linebreakable<\/code>"}}},"sap.ui.layout.SplitPane":{"!description":"SplitPane is a container of a single control.\nCould be used as an aggregation of a PaneContainer.","getDemandPane":{"!description":"Gets current value of property <code>demandPane<\/code>.\r\rDetermines whether the pane will be moved to the pagination\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.SplitPane.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setContent":{"!description":"Sets the aggregated <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.SplitPane","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to set"}},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\r\rContent of the SplitPane","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"!proto":"sap.ui.core.Element","!category":"class","setRequiredParentWidth":{"!description":"Sets a new value for property <code>requiredParentWidth<\/code>.\r\rDetermines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>800<\/code>.","!static":false,"!category":"function","!type":"fn(iRequiredParentWidth: Number) -> sap.ui.layout.SplitPane","parameters":{"iRequiredParentWidth":"type: int, description: New value for property <code>requiredParentWidth<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.SplitPane with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new SplitPane.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getDemandPane demandPane} : boolean (default: true)<\/li>\n<li>{@link #getRequiredParentWidth requiredParentWidth} : int (default: 800)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/layout/SplitPane","!helpDescription":"SplitPane is a container of a single control.\nCould be used as an aggregation of a PaneContainer.","getRequiredParentWidth":{"!description":"Gets current value of property <code>requiredParentWidth<\/code>.\r\rDetermines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.\r\rDefault value is <code>800<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setDemandPane":{"!description":"Sets a new value for property <code>demandPane<\/code>.\r\rDetermines whether the pane will be moved to the pagination\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bDemandPane: Boolean) -> sap.ui.layout.SplitPane","parameters":{"bDemandPane":"type: boolean, description: New value for property <code>demandPane<\/code>"}},"destroyContent":{"!description":"Destroys the content in the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.SplitPane"}},"sap.ui.layout.BlockLayoutCell_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutCell with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.BlockLayoutCell"},"sap.ui.layout.Splitter_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Splitter with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.Splitter"},"sap.ui.layout.SplitterLayoutData":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.SplitterLayoutData.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setResizable":{"!description":"Sets a new value for property <code>resizable<\/code>.\r\rDetermines whether the control in the splitter can be resized or not.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bResizable: Boolean) -> sap.ui.layout.SplitterLayoutData","parameters":{"bResizable":"type: boolean, description: New value for property <code>resizable<\/code>"}},"!proto":"sap.ui.core.LayoutData","!category":"class","getMinSize":{"!description":"Gets current value of property <code>minSize<\/code>.\r\rSets the minimum size of the splitter content in px.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getResizable":{"!description":"Gets current value of property <code>resizable<\/code>.\r\rDetermines whether the control in the splitter can be resized or not.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.SplitterLayoutData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getSize":{"!description":"Gets current value of property <code>size<\/code>.\r\rSets the size of the splitter content.\r\rDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!constructorDescription":"Constructor for a new SplitterLayoutData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getResizable resizable} : boolean (default: true)<\/li>\n<li>{@link #getSize size} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getMinSize minSize} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","setSize":{"!description":"Sets a new value for property <code>size<\/code>.\r\rSets the size of the splitter content.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn(sSize: sap.ui.core.CSSSize) -> sap.ui.layout.SplitterLayoutData","parameters":{"sSize":"type: sap.ui.core.CSSSize, description: New value for property <code>size<\/code>"}},"!module":"sap/ui/layout/SplitterLayoutData","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","setMinSize":{"!description":"Sets a new value for property <code>minSize<\/code>.\r\rSets the minimum size of the splitter content in px.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iMinSize: Number) -> sap.ui.layout.SplitterLayoutData","parameters":{"iMinSize":"type: int, description: New value for property <code>minSize<\/code>"}}},"sap.ui.layout.form.SimpleFormLayout":{"!description":"Available <code>FormLayouts<\/code> used to render a <code>SimpleForm<\/code>.","GridLayout":{"!description":"Uses the <code>GridLayout<\/code> to render the <code>SimpleForm<\/code>","!category":"enum","!type":"String"},"!module":"sap/ui/layout/library","ResponsiveLayout":{"!description":"Uses the <code>ResponsiveLayout<\/code> to render the <code>SimpleForm<\/code>","!category":"enum","!type":"String"},"!category":"static class","ResponsiveGridLayout":{"!description":"Uses the <code>ResponsiveGridLayout<\/code> to render the <code>SimpleForm<\/code>","!category":"enum","!type":"String"}},"sap.ui.layout.form.GridElementData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridElementData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.GridElementData"},"sap.ui.layout.BlockLayoutRow_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutRow with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.BlockLayoutRow"},"sap.ui.layout.GridData":{"setLinebreakXL":{"!description":"Sets a new value for property <code>linebreakXL<\/code>.\r\rOptional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bLinebreakXL: Boolean) -> sap.ui.layout.GridData","parameters":{"bLinebreakXL":"type: boolean, description: New value for property <code>linebreakXL<\/code>"}},"getLinebreakL":{"!description":"Gets current value of property <code>linebreakL<\/code>.\r\rOptional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setIndentMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentM instead.<br>Sets a new value for property <code>indentMedium<\/code>.\r\rDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iIndentMedium: Number) -> sap.ui.layout.GridData","parameters":{"iIndentMedium":"type: int, description: New value for property <code>indentMedium<\/code>"}},"getLinebreakS":{"!description":"Gets current value of property <code>linebreakS<\/code>.\r\rOptional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getMoveBackwards":{"!description":"Gets current value of property <code>moveBackwards<\/code>.\r\rOptional. Moves a cell backwards so many columns as specified.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.GridIndent"},"getLinebreakM":{"!description":"Gets current value of property <code>linebreakM<\/code>.\r\rOptional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getVisibleOnSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleS instead.<br>Gets current value of property <code>visibleOnSmall<\/code>.\r\rDeprecated. Defines if this Control is visible on small screens.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setLinebreakS":{"!description":"Sets a new value for property <code>linebreakS<\/code>.\r\rOptional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bLinebreakS: Boolean) -> sap.ui.layout.GridData","parameters":{"bLinebreakS":"type: boolean, description: New value for property <code>linebreakS<\/code>"}},"setLinebreak":{"!description":"Sets a new value for property <code>linebreak<\/code>.\r\rOptional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bLinebreak: Boolean) -> sap.ui.layout.GridData","parameters":{"bLinebreak":"type: boolean, description: New value for property <code>linebreak<\/code>"}},"getSpanXL":{"!description":"Gets current value of property <code>spanXL<\/code>.\r\rOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".","!static":false,"!category":"function","!type":"fn() -> Number"},"setIndent":{"!description":"Sets a new value for property <code>indent<\/code>.\r\rA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sIndent: sap.ui.layout.GridIndent) -> sap.ui.layout.GridData","parameters":{"sIndent":"type: sap.ui.layout.GridIndent, description: New value for property <code>indent<\/code>"}},"setLinebreakL":{"!description":"Sets a new value for property <code>linebreakL<\/code>.\r\rOptional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bLinebreakL: Boolean) -> sap.ui.layout.GridData","parameters":{"bLinebreakL":"type: boolean, description: New value for property <code>linebreakL<\/code>"}},"getIndentXL":{"!description":"Gets current value of property <code>indentXL<\/code>.\r\rOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".","!static":false,"!category":"function","!type":"fn() -> Number"},"setSpan":{"!description":"Sets a new value for property <code>span<\/code>.\r\rA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sSpan: sap.ui.layout.GridSpan) -> sap.ui.layout.GridData","parameters":{"sSpan":"type: sap.ui.layout.GridSpan, description: New value for property <code>span<\/code>"}},"setLinebreakM":{"!description":"Sets a new value for property <code>linebreakM<\/code>.\r\rOptional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bLinebreakM: Boolean) -> sap.ui.layout.GridData","parameters":{"bLinebreakM":"type: boolean, description: New value for property <code>linebreakM<\/code>"}},"getLinebreakXL":{"!description":"Gets current value of property <code>linebreakXL<\/code>.\r\rOptional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setSpanLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanL instead.<br>Sets a new value for property <code>spanLarge<\/code>.\r\rDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iSpanLarge: Number) -> sap.ui.layout.GridData","parameters":{"iSpanLarge":"type: int, description: New value for property <code>spanLarge<\/code>"}},"!description":"Grid layout data","setSpanXL":{"!description":"Sets a new value for property <code>spanXL<\/code>.\r\rOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iSpanXL: Number) -> sap.ui.layout.GridData","parameters":{"iSpanXL":"type: int, description: New value for property <code>spanXL<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.GridData.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getIndent":{"!description":"Gets current value of property <code>indent<\/code>.\r\rA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.GridIndent"},"setSpanSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanS instead.<br>Sets a new value for property <code>spanSmall<\/code>.\r\rDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iSpanSmall: Number) -> sap.ui.layout.GridData","parameters":{"iSpanSmall":"type: int, description: New value for property <code>spanSmall<\/code>"}},"setVisibleOnMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleM instead.<br>Sets a new value for property <code>visibleOnMedium<\/code>.\r\rDeprecated. Defines if this Control is visible on Medium size screens.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisibleOnMedium: Boolean) -> sap.ui.layout.GridData","parameters":{"bVisibleOnMedium":"type: boolean, description: New value for property <code>visibleOnMedium<\/code>"}},"getSpanLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanL instead.<br>Gets current value of property <code>spanLarge<\/code>.\r\rDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!static":false,"!category":"function","!type":"fn() -> Number"},"getSpanL":{"!description":"Gets current value of property <code>spanL<\/code>.\r\rOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!static":false,"!category":"function","!type":"fn() -> Number"},"getSpanM":{"!description":"Gets current value of property <code>spanM<\/code>.\r\rOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!static":false,"!category":"function","!type":"fn() -> Number"},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.GridData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getMoveForward":{"!description":"Gets current value of property <code>moveForward<\/code>.\r\rOptional. Moves a cell forwards so many columns as specified.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.GridIndent"},"setSpanS":{"!description":"Sets a new value for property <code>spanS<\/code>.\r\rOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iSpanS: Number) -> sap.ui.layout.GridData","parameters":{"iSpanS":"type: int, description: New value for property <code>spanS<\/code>"}},"!module":"sap/ui/layout/GridData","setIndentSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentS instead.<br>Sets a new value for property <code>indentSmall<\/code>.\r\rDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iIndentSmall: Number) -> sap.ui.layout.GridData","parameters":{"iIndentSmall":"type: int, description: New value for property <code>indentSmall<\/code>"}},"setSpanL":{"!description":"Sets a new value for property <code>spanL<\/code>.\r\rOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iSpanL: Number) -> sap.ui.layout.GridData","parameters":{"iSpanL":"type: int, description: New value for property <code>spanL<\/code>"}},"!helpDescription":"Grid layout data","getSpanS":{"!description":"Gets current value of property <code>spanS<\/code>.\r\rOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!static":false,"!category":"function","!type":"fn() -> Number"},"getVisibleXL":{"!description":"Gets current value of property <code>visibleXL<\/code>.\r\rDefines if this Control is visible on XL - extra Large screens.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setSpanM":{"!description":"Sets a new value for property <code>spanM<\/code>.\r\rOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iSpanM: Number) -> sap.ui.layout.GridData","parameters":{"iSpanM":"type: int, description: New value for property <code>spanM<\/code>"}},"getIndentLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentL instead.<br>Gets current value of property <code>indentLarge<\/code>.\r\rDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!static":false,"!category":"function","!type":"fn() -> Number"},"getSpanSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanS instead.<br>Gets current value of property <code>spanSmall<\/code>.\r\rDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!static":false,"!category":"function","!type":"fn() -> Number"},"setMoveForward":{"!description":"Sets a new value for property <code>moveForward<\/code>.\r\rOptional. Moves a cell forwards so many columns as specified.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sMoveForward: sap.ui.layout.GridIndent) -> sap.ui.layout.GridData","parameters":{"sMoveForward":"type: sap.ui.layout.GridIndent, description: New value for property <code>moveForward<\/code>"}},"getSpan":{"!description":"Gets current value of property <code>span<\/code>.\r\rA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.GridSpan"},"getSpanMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanM instead.<br>Gets current value of property <code>spanMedium<\/code>.\r\rDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!static":false,"!category":"function","!type":"fn() -> Number"},"!proto":"sap.ui.core.LayoutData","!category":"class","getIndentM":{"!description":"Gets current value of property <code>indentM<\/code>.\r\rOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!static":false,"!category":"function","!type":"fn() -> Number"},"getIndentL":{"!description":"Gets current value of property <code>indentL<\/code>.\r\rOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!static":false,"!category":"function","!type":"fn() -> Number"},"setIndentLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentL instead.<br>Sets a new value for property <code>indentLarge<\/code>.\r\rDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iIndentLarge: Number) -> sap.ui.layout.GridData","parameters":{"iIndentLarge":"type: int, description: New value for property <code>indentLarge<\/code>"}},"getIndentMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentM instead.<br>Gets current value of property <code>indentMedium<\/code>.\r\rDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!static":false,"!category":"function","!type":"fn() -> Number"},"setIndentL":{"!description":"Sets a new value for property <code>indentL<\/code>.\r\rOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iIndentL: Number) -> sap.ui.layout.GridData","parameters":{"iIndentL":"type: int, description: New value for property <code>indentL<\/code>"}},"setIndentM":{"!description":"Sets a new value for property <code>indentM<\/code>.\r\rOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iIndentM: Number) -> sap.ui.layout.GridData","parameters":{"iIndentM":"type: int, description: New value for property <code>indentM<\/code>"}},"getIndentS":{"!description":"Gets current value of property <code>indentS<\/code>.\r\rOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!static":false,"!category":"function","!type":"fn() -> Number"},"getVisibleS":{"!description":"Gets current value of property <code>visibleS<\/code>.\r\rDefines if this Control is visible on small screens.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!constructorDescription":"Constructor for a new GridData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSpan span} : sap.ui.layout.GridSpan<\/li>\n<li>{@link #getSpanXL spanXL} : int<\/li>\n<li>{@link #getSpanL spanL} : int<\/li>\n<li>{@link #getSpanM spanM} : int<\/li>\n<li>{@link #getSpanS spanS} : int<\/li>\n<li>{@link #getIndent indent} : sap.ui.layout.GridIndent<\/li>\n<li>{@link #getIndentXL indentXL} : int<\/li>\n<li>{@link #getIndentL indentL} : int<\/li>\n<li>{@link #getIndentM indentM} : int<\/li>\n<li>{@link #getIndentS indentS} : int<\/li>\n<li>{@link #getVisibleXL visibleXL} : boolean (default: true)<\/li>\n<li>{@link #getVisibleL visibleL} : boolean (default: true)<\/li>\n<li>{@link #getVisibleM visibleM} : boolean (default: true)<\/li>\n<li>{@link #getVisibleS visibleS} : boolean (default: true)<\/li>\n<li>{@link #getMoveBackwards moveBackwards} : sap.ui.layout.GridIndent<\/li>\n<li>{@link #getMoveForward moveForward} : sap.ui.layout.GridIndent<\/li>\n<li>{@link #getLinebreak linebreak} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakXL linebreakXL} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakL linebreakL} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakM linebreakM} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakS linebreakS} : boolean (default: false)<\/li>\n<li>{@link #getSpanLarge spanLarge} : int<\/li>\n<li>{@link #getSpanMedium spanMedium} : int<\/li>\n<li>{@link #getSpanSmall spanSmall} : int<\/li>\n<li>{@link #getIndentLarge indentLarge} : int<\/li>\n<li>{@link #getIndentMedium indentMedium} : int<\/li>\n<li>{@link #getIndentSmall indentSmall} : int<\/li>\n<li>{@link #getVisibleOnLarge visibleOnLarge} : boolean (default: true)<\/li>\n<li>{@link #getVisibleOnMedium visibleOnMedium} : boolean (default: true)<\/li>\n<li>{@link #getVisibleOnSmall visibleOnSmall} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","getVisibleL":{"!description":"Gets current value of property <code>visibleL<\/code>.\r\rDefines if this Control is visible on Large screens.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getVisibleM":{"!description":"Gets current value of property <code>visibleM<\/code>.\r\rDefines if this Control is visible on Medium size screens.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setSpanMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanM instead.<br>Sets a new value for property <code>spanMedium<\/code>.\r\rDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iSpanMedium: Number) -> sap.ui.layout.GridData","parameters":{"iSpanMedium":"type: int, description: New value for property <code>spanMedium<\/code>"}},"getVisibleOnMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleM instead.<br>Gets current value of property <code>visibleOnMedium<\/code>.\r\rDeprecated. Defines if this Control is visible on Medium size screens.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getVisibleOnLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleL instead.<br>Gets current value of property <code>visibleOnLarge<\/code>.\r\rDeprecated. Defines if this Control is visible on Large screens.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getLinebreak":{"!description":"Gets current value of property <code>linebreak<\/code>.\r\rOptional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.\r\rDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setVisibleS":{"!description":"Sets a new value for property <code>visibleS<\/code>.\r\rDefines if this Control is visible on small screens.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisibleS: Boolean) -> sap.ui.layout.GridData","parameters":{"bVisibleS":"type: boolean, description: New value for property <code>visibleS<\/code>"}},"setVisibleOnLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleL instead.<br>Sets a new value for property <code>visibleOnLarge<\/code>.\r\rDeprecated. Defines if this Control is visible on Large screens.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisibleOnLarge: Boolean) -> sap.ui.layout.GridData","parameters":{"bVisibleOnLarge":"type: boolean, description: New value for property <code>visibleOnLarge<\/code>"}},"setIndentXL":{"!description":"Sets a new value for property <code>indentXL<\/code>.\r\rOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iIndentXL: Number) -> sap.ui.layout.GridData","parameters":{"iIndentXL":"type: int, description: New value for property <code>indentXL<\/code>"}},"setVisibleL":{"!description":"Sets a new value for property <code>visibleL<\/code>.\r\rDefines if this Control is visible on Large screens.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisibleL: Boolean) -> sap.ui.layout.GridData","parameters":{"bVisibleL":"type: boolean, description: New value for property <code>visibleL<\/code>"}},"setVisibleOnSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleS instead.<br>Sets a new value for property <code>visibleOnSmall<\/code>.\r\rDeprecated. Defines if this Control is visible on small screens.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisibleOnSmall: Boolean) -> sap.ui.layout.GridData","parameters":{"bVisibleOnSmall":"type: boolean, description: New value for property <code>visibleOnSmall<\/code>"}},"setVisibleM":{"!description":"Sets a new value for property <code>visibleM<\/code>.\r\rDefines if this Control is visible on Medium size screens.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisibleM: Boolean) -> sap.ui.layout.GridData","parameters":{"bVisibleM":"type: boolean, description: New value for property <code>visibleM<\/code>"}},"setMoveBackwards":{"!description":"Sets a new value for property <code>moveBackwards<\/code>.\r\rOptional. Moves a cell backwards so many columns as specified.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sMoveBackwards: sap.ui.layout.GridIndent) -> sap.ui.layout.GridData","parameters":{"sMoveBackwards":"type: sap.ui.layout.GridIndent, description: New value for property <code>moveBackwards<\/code>"}},"getIndentSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentS instead.<br>Gets current value of property <code>indentSmall<\/code>.\r\rDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!static":false,"!category":"function","!type":"fn() -> Number"},"setIndentS":{"!description":"Sets a new value for property <code>indentS<\/code>.\r\rOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iIndentS: Number) -> sap.ui.layout.GridData","parameters":{"iIndentS":"type: int, description: New value for property <code>indentS<\/code>"}},"setVisibleXL":{"!description":"Sets a new value for property <code>visibleXL<\/code>.\r\rDefines if this Control is visible on XL - extra Large screens.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisibleXL: Boolean) -> sap.ui.layout.GridData","parameters":{"bVisibleXL":"type: boolean, description: New value for property <code>visibleXL<\/code>"}}},"sap.ui.layout.SideContentFallDown":{"!description":"Types of the DynamicSideContent FallDown options","!module":"sap/ui/layout/library","OnMinimumWidth":{"!description":"Side content falls down on breakpoint M and the minimum width for the side content","!category":"enum","!type":"String"},"!category":"static class","BelowL":{"!description":"Side content falls down on breakpoints below L","!category":"enum","!type":"String"},"BelowM":{"!description":"Side content falls down on breakpoints below M","!category":"enum","!type":"String"},"BelowXL":{"!description":"Side content falls down on breakpoints below XL","!category":"enum","!type":"String"}},"sap.ui.layout.form":{"vCells":{"!description":"Number of cells in vertical direction.\n\n<b>Note:<\/b> This property has no effect on labels.","!category":"enum","!type":"Number"},"SimpleForm":"sap.ui.layout.form.SimpleForm_obj","GridContainerData":"sap.ui.layout.form.GridContainerData_obj","breakpointL":{"!description":"Breakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"columnsXL":{"!description":"Form columns for extra large size.\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).","!category":"enum","!type":"Number"},"Form":"sap.ui.layout.form.Form_obj","SimpleFormLayout":"sap.ui.layout.form.SimpleFormLayout","expandable":{"!description":"Defines if the <code>FormContainer<\/code> is expandable.\n\n<b>Note:<\/b> The expander icon will only be shown if a <code>title<\/code> is set for the <code>FormContainer<\/code>.","!category":"enum","!type":"Boolean"},"emptySpanM":{"!description":"Number of grid cells that are empty at the end of each line on medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"breakpointM":{"!description":"Breakpoint between Small size and Medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"emptySpanL":{"!description":"Number of grid cells that are empty at the end of each line on large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"columnsM":{"!description":"Form columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"ResponsiveGridLayout":"sap.ui.layout.form.ResponsiveGridLayout_obj","!category":"namespace","GridElementData":"sap.ui.layout.form.GridElementData_obj","emptySpanS":{"!description":"Number of grid cells that are empty at the end of each line on small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"GridLayout":"sap.ui.layout.form.GridLayout_obj","expanded":{"!description":"Container is expanded.\n\n<b>Note:<\/b> This property only works if <code>expandable<\/code> is set to <code>true<\/code>.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"FormContainer":"sap.ui.layout.form.FormContainer_obj","busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"singleColumn":{"!description":"If set, the grid renders only one <code>FormContainer<\/code> per column. That means one <code>FormContainer<\/code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer<\/code> can use the full width of the grid or two <code>FormContainers<\/code> can be placed beside each other. In this case the whole grid has 16 cells per row.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to. All fields in a logical field group should share the same <code>fieldGroupId<\/code>.\nOnce a logical field group is left, the validateFieldGroup event is raised.\n\nSee {@link sap.ui.core.Control#attachValidateFieldGroup}.","!category":"enum","!type":"[String]"},"halfGrid":{"!description":"If set, the container takes half the width of the <code>Form<\/code> (8 cells), if not it takes the full width (16 cells).\nIf the <code>GridLayout<\/code> is set to <code>singleColumn<\/code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.","!category":"enum","!type":"Boolean"},"columnsL":{"!description":"Form columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"breakpointXL":{"!description":"Breakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"maxContainerCols":{"!description":"The maximum amount of groups (<code>FormContainers<\/code>) per row that is used before a new row is started.\n\n<b>Note:<\/b> If a <code>ResponsiveGridLayout<\/code> is used as a <code>layout<\/code>, this property is not used. Please use the properties <code>ColumnsL<\/code> and <code>ColumnsM<\/code> in this case.","!category":"enum","!type":"Number"},"hCells":{"!description":"Number of cells in horizontal direction.\n\nIf set to <code>auto<\/code>, the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\n\nIf set to <code>full<\/code>, only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above.\n\n<b>Note:<\/b> For labels, the full size setting has no effect.","!category":"enum","!type":"sap.ui.layout.form.GridElementCells"},"FormLayout":"sap.ui.layout.form.FormLayout_obj","labelSpanXL":{"!description":"Default span for labels in extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used (from the backward compatibility reasons).","!category":"enum","!type":"Number"},"visible":{"!description":"Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control","!category":"enum","!type":"Boolean"},"GridElementCells":"sap.ui.layout.form.GridElementCells","singleContainerFullSize":{"!description":"If the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set,\nthe <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>.\nIn this case the properties <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Boolean"},"editable":{"!description":"Applies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.","!category":"enum","!type":"Boolean"},"ResponsiveLayout":"sap.ui.layout.form.ResponsiveLayout_obj","minWidth":{"!description":"The overall minimum width in pixels that is used for the <code>SimpleForm<\/code>. If the available width is below the given <code>minWidth<\/code> the <code>SimpleForm<\/code> will create a new row for the next group (<code>FormContainer<\/code>).\nThe default value is -1, meaning that inner groups (<code>FormContainers<\/code>) will be stacked until <code>maxContainerCols<\/code> is reached, irrespective of whether a <code>width<\/code> is reached or the available parents width is reached.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"labelSpanM":{"!description":"Default span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"labelSpanL":{"!description":"Default span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"FormElement":"sap.ui.layout.form.FormElement_obj","emptySpanXL":{"!description":"Number of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used (from the backward compatibility reasons).","!category":"enum","!type":"Number"},"layout":{"!description":"The <code>FormLayout<\/code> that is used to render the <code>SimpleForm<\/code>.\n\nWe recommend using the <code>ResponsiveGridLayout<\/code> for rendering a <code>SimpleForm<\/code>, as its responsiveness uses the space available in the best way possible.","!category":"enum","!type":"sap.ui.layout.form.SimpleFormLayout"},"labelSpanS":{"!description":"Default span for labels in small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"width":{"!description":"Width of the form.","!category":"enum","!type":"sap.ui.core.CSSSize"},"adjustLabelSpan":{"!description":"If set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row.\nIf only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms<\/code>.\nThis is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code>\n(because every <code>FormContainer<\/code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size.\nThe number of <code>FormContainers<\/code> doesn't matter in this case.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!category":"enum","!type":"Boolean"},"labelMinWidth":{"!description":"Specifies the min-width in pixels of the label in all form rows.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.","!category":"enum","!type":"Number"},"backgroundDesign":{"!description":"Specifies the background color of the <code>SimpleForm<\/code> content.\n\nThe visualization of the different options depends on the used theme.","!category":"enum","!type":"sap.ui.layout.BackgroundDesign"}},"sap.ui.layout.form.ResponsiveGridLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveGridLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.ResponsiveGridLayout"},"sap":{"sap":"sap","ui":"sap.ui","!category":"namespace"},"sap.ui.layout.form.GridElementData":{"!description":"The <code>GridLayout<\/code>-specific layout data for <code>FormElement<\/code> fields.","extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridElementData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getHCells":{"!description":"Gets current value of property <code>hCells<\/code>.\r\rNumber of cells in horizontal direction.\n\nIf set to <code>auto<\/code>, the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\n\nIf set to <code>full<\/code>, only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above.\n\n<b>Note:<\/b> For labels, the full size setting has no effect.\r\rDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.form.GridElementCells"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.GridElementData.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new sap.ui.layout.form.GridElementData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getHCells hCells} : sap.ui.layout.form.GridElementCells (default: auto)<\/li>\n<li>{@link #getVCells vCells} : int (default: 1)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","getVCells":{"!description":"Gets current value of property <code>vCells<\/code>.\r\rNumber of cells in vertical direction.\n\n<b>Note:<\/b> This property has no effect on labels.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"!module":"sap/ui/layout/form/GridElementData","!helpDescription":"The <code>GridLayout<\/code>-specific layout data for <code>FormElement<\/code> fields.","!proto":"sap.ui.core.LayoutData","!category":"class","setVCells":{"!description":"Sets a new value for property <code>vCells<\/code>.\r\rNumber of cells in vertical direction.\n\n<b>Note:<\/b> This property has no effect on labels.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn(iVCells: Number) -> sap.ui.layout.form.GridElementData","parameters":{"iVCells":"type: int, description: New value for property <code>vCells<\/code>"}},"setHCells":{"!description":"Sets a new value for property <code>hCells<\/code>.\r\rNumber of cells in horizontal direction.\n\nIf set to <code>auto<\/code>, the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\n\nIf set to <code>full<\/code>, only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above.\n\n<b>Note:<\/b> For labels, the full size setting has no effect.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn(sHCells: sap.ui.layout.form.GridElementCells) -> sap.ui.layout.form.GridElementData","parameters":{"sHCells":"type: sap.ui.layout.form.GridElementCells, description: New value for property <code>hCells<\/code>"}}},"sap.ui.layout.form.FormElement_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormElement with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.FormElement"},"sap.ui":{"layout":"sap.ui.layout","!category":"namespace"},"sap.ui.layout.Grid_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Grid with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.Grid"},"sap.ui.layout.HorizontalLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.HorizontalLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.HorizontalLayout"},"sap.ui.layout.VerticalLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.VerticalLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.VerticalLayout"},"sap.ui.layout.GridIndent":{"!description":"A string type that represents Grid's indent values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large  medium  small.","!module":"sap/ui/layout/library","!helpDescription":"A string type that represents Grid's indent values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large  medium  small.","!category":"namespace"},"sap.ui.layout.ResponsiveFlowLayoutData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayoutData with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.ResponsiveFlowLayoutData"},"sap.ui.layout.SplitPane_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.SplitPane with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.SplitPane"},"sap.ui.layout.Splitter":{"detachResize":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>resize<\/code> event of this <code>sap.ui.layout.Splitter<\/code>.\r\rThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.layout.Splitter","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"disableLiveResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Disables recalculation and resize of the splitter contents while dragging the splitter bar.\nThis means that the contents are resized only once after moving the splitter bar.","!static":false,"!category":"function","!type":"fn()"},"enableLiveResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Enables recalculation and resize of the splitter contents while dragging the splitter bar.\nThis means that the contents are resized several times per second when moving the splitter bar.","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.core.Control","removeAllContentAreas":{"!description":"Removes all the controls from the aggregation <code>contentAreas<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!category":"class","enableAutoResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Enables the resize handler for this control, this leads to an automatic resize of\nthe contents whenever the control changes its size. The resize handler is enabled\nin every control instance by default.\nFor performance reasons this behavior can be disabled by calling disableAutoResize()","!static":false,"!category":"function","!type":"fn(bTemporarily?: Boolean)","parameters":{"bTemporarily":"type: boolean, description: Only enables autoResize if it was previously disabled temporarily (used for live resize)"}},"getWidth":{"!description":"Gets current value of property <code>width<\/code>.\r\rThe width of the control\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"getCalculatedSizes":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Returns the current actual content sizes as pixel value - these values can change with every\nresize.","!static":false,"!category":"function","!type":"fn() -> [Number]"},"addContentArea":{"!description":"Adds some contentArea to the aggregation <code>contentAreas<\/code>.","!static":false,"!category":"function","!type":"fn(oContentArea: sap.ui.core.Control) -> sap.ui.layout.Splitter","parameters":{"oContentArea":"type: sap.ui.core.Control, description: the contentArea to add; if empty, nothing is inserted"}},"getHeight":{"!description":"Gets current value of property <code>height<\/code>.\r\rThe height of the control\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!constructorDescription":"Constructor for a new Splitter.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getOrientation orientation} : sap.ui.core.Orientation (default: Horizontal)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContentAreas contentAreas} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:resize resize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","disableAutoResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Disables the resize handler for this control, this leads to an automatic resize of\nthe contents whenever the control changes its size. The resize handler is enabled\nin every control instance by default.\nFor performance reasons this behavior can be disabled by calling disableAutoResize()","!static":false,"!category":"function","!type":"fn(bTemporarily?: Boolean)","parameters":{"bTemporarily":"type: boolean, description: Only disable autoResize temporarily (used for live resize), so that the previous status can be restored afterwards"}},"getOrientation":{"!description":"Gets current value of property <code>orientation<\/code>.\r\rWhether to split the contents horizontally (default) or vertically.\r\rDefault value is <code>Horizontal<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Orientation"},"getContentAreas":{"!description":"Gets content of aggregation <code>contentAreas<\/code>.\r\rThe content areas to be split. The control will show n-1 splitter bars between n controls in this aggregation.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"insertContentArea":{"!description":"Inserts a contentArea into the aggregation <code>contentAreas<\/code>.","!static":false,"!category":"function","!type":"fn(oContentArea: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.Splitter","parameters":{"oContentArea":"type: sap.ui.core.Control, description: the contentArea to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the contentArea should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the contentArea is inserted at position 0; for a value\r             greater than the current size of the aggregation, the contentArea is inserted at\r             the last position"}},"!description":"A layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.\n\nBy adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.\n\nThe orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.\n\nThe splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).\n\nThe splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.","setOrientation":{"!description":"Sets a new value for property <code>orientation<\/code>.\r\rWhether to split the contents horizontally (default) or vertically.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>Horizontal<\/code>.","!static":false,"!category":"function","!type":"fn(sOrientation: sap.ui.core.Orientation) -> sap.ui.layout.Splitter","parameters":{"sOrientation":"type: sap.ui.core.Orientation, description: New value for property <code>orientation<\/code>"}},"triggerResize":{"!description":"This method  triggers a resize on the Splitter - meaning it forces the Splitter to recalculate\nall sizes.\nThis method should only be used in rare cases, for example when the CSS that defines the sizes\nof the splitter bars changes without triggering a rerendering of the splitter.","!static":false,"!category":"function","!type":"fn(forceDirectly?: Boolean)","parameters":{"forceDirectly":"type: boolean, description: Do not delay the resize, trigger it right now."}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.Splitter.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"indexOfContentArea":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>contentAreas<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContentArea: sap.ui.core.Control) -> Number","parameters":{"oContentArea":"type: sap.ui.core.Control, description: The contentArea whose index is looked for"}},"fireResize":{"!description":"Fires event <code>resize<\/code> to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.layout.Splitter","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachResize":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>resize<\/code> event of this <code>sap.ui.layout.Splitter<\/code>.\r\rWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \rotherwise it will be bound to this <code>sap.ui.layout.Splitter<\/code> itself.\r\rEvent is fired when contents are resized.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.layout.Splitter","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.layout.Splitter<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setHeight":{"!description":"Sets a new value for property <code>height<\/code>.\r\rThe height of the control\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.layout.Splitter","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\r\rThe width of the control\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.Splitter","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"destroyContentAreas":{"!description":"Destroys all the contentAreas in the aggregation <code>contentAreas<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.Splitter"},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Splitter with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"removeContentArea":{"!description":"Removes a contentArea from the aggregation <code>contentAreas<\/code>.","!static":false,"!category":"function","!type":"fn(vContentArea: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vContentArea":"type: int|string|sap.ui.core.Control, description: The contentArea to remove or its index or id"}},"!module":"sap/ui/layout/Splitter","!helpDescription":"A layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.\n\nBy adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.\n\nThe orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.\n\nThe splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).\n\nThe splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.","enableKeyboardSupport":{"!description":"Enables the resizing of the Splitter contents via keyboard. This makes the Splitter bars\nfocussable elements.","!static":false,"!category":"function","!type":"fn()"},"disableKeyboardSupport":{"!description":"Disables the resizing of the Splitter contents via keyboard. This changes the Splitter bars\nto non-focussable elements.","!static":false,"!category":"function","!type":"fn()"}},"sap.ui.layout.SideContentVisibility":{"!description":"Types of the DynamicSideContent Visibility options","!module":"sap/ui/layout/library","ShowAboveM":{"!description":"Show the side content on L and XL breakpoints","!category":"enum","!type":"String"},"ShowAboveL":{"!description":"Show the side content on XL breakpoint","!category":"enum","!type":"String"},"!category":"static class","ShowAboveS":{"!description":"Show the side content on M, L and XL breakpoints","!category":"enum","!type":"String"},"NeverShow":{"!description":"Don't show the side content on any breakpoints","!category":"enum","!type":"String"},"AlwaysShow":{"!description":"Show the side content on any breakpoint","!category":"enum","!type":"String"}},"sap.ui.layout.GridPosition":{"!description":"The position of the Grid. Can be \"Left\", \"Center\" or \"Right\". \"Left\" is default.","Center":{"!description":"Grid is centered on the screen.","!category":"enum","!type":"String"},"Left":{"!description":"Grid is aligned left.","!category":"enum","!type":"String"},"!module":"sap/ui/layout/library","Right":{"!description":"Grid is aligned to the right.","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.layout.BlockLayoutCell":{"!description":"The BlockLayoutCell is used as an aggregation of the BlockLayoutRow. It contains Controls.\nThe BlockLayoutCell should be used only as aggregation of the BlockLayoutRow.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.BlockLayoutCell.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>content<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> Number","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"}},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\r\rThe content to be included inside the cell","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.core.Control","removeAllContent":{"!description":"Removes all the controls from the aggregation <code>content<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"setTitle":{"!description":"Sets a new value for property <code>title<\/code>.\r\rDefines the title of the cell\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sTitle: String) -> sap.ui.layout.BlockLayoutCell","parameters":{"sTitle":"type: string, description: New value for property <code>title<\/code>"}},"!category":"class","getWidth":{"!description":"Gets current value of property <code>width<\/code>.\r\rDefines the width of the cell. Depending on the context of the cell - whether it's in scrollable,\nor non scrollable row, this property is interpreted in two different ways.\nIf the cell is placed inside a scrollable row - this property defines the width of the cell in\npercentages. If no value is provided - the default is 40%.\nIf the cell is placed inside a non scrollable row - this property defines the grow factor of the cell\ncompared to the whole row.\n<b>For example:<\/b> If you have 2 cells, each with width of 1, this means that they should be of equal size,\nand they need to fill the whole row. This results in 50% width for each cell. If you have 2 cells,\none with width of 1, the other with width of 3, this means that the whole row width is 4, so the first\ncell will have a width of 25%, the second - 75%.\nAccording to the visual guidelines, it is suggested that you only use 25%, 50%, 75% or 100% cells in\nyou applications. For example, 12,5% width is not desirable (1 cell with width 1, and another with width 7)\r\rDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"addContent":{"!description":"Adds some content to the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.BlockLayoutCell","parameters":{"oContent":"type: sap.ui.core.Control, description: the content to add; if empty, nothing is inserted"}},"removeContent":{"!description":"Removes a content from the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutCell with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"setTitleLevel":{"!description":"Sets a new value for property <code>titleLevel<\/code>.\r\rDefines the aria level of the title\nThis information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>Auto<\/code>.","!static":false,"!category":"function","!type":"fn(sTitleLevel: sap.ui.core.TitleLevel) -> sap.ui.layout.BlockLayoutCell","parameters":{"sTitleLevel":"type: sap.ui.core.TitleLevel, description: New value for property <code>titleLevel<\/code>"}},"!constructorDescription":"Constructor for a new BlockLayoutCell.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getTitle title} : string<\/li>\n<li>{@link #getTitleAlignment titleAlignment} : sap.ui.core.HorizontalAlign (default: Begin)<\/li>\n<li>{@link #getTitleLevel titleLevel} : sap.ui.core.TitleLevel (default: Auto)<\/li>\n<li>{@link #getWidth width} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getTitle":{"!description":"Gets current value of property <code>title<\/code>.\r\rDefines the title of the cell","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/layout/BlockLayoutCell","!helpDescription":"The BlockLayoutCell is used as an aggregation of the BlockLayoutRow. It contains Controls.\nThe BlockLayoutCell should be used only as aggregation of the BlockLayoutRow.","getTitleLevel":{"!description":"Gets current value of property <code>titleLevel<\/code>.\r\rDefines the aria level of the title\nThis information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.\r\rDefault value is <code>Auto<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.TitleLevel"},"insertContent":{"!description":"Inserts a content into the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.BlockLayoutCell","parameters":{"oContent":"type: sap.ui.core.Control, description: the content to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the content should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value\r             greater than the current size of the aggregation, the content is inserted at\r             the last position"}},"getTitleAlignment":{"!description":"Gets current value of property <code>titleAlignment<\/code>.\r\rDefines the alignment of the cell title\r\rDefault value is <code>Begin<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.HorizontalAlign"},"setTitleAlignment":{"!description":"Sets a new value for property <code>titleAlignment<\/code>.\r\rDefines the alignment of the cell title\r\rWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\r\rDefault value is <code>Begin<\/code>.","!static":false,"!category":"function","!type":"fn(sTitleAlignment: sap.ui.core.HorizontalAlign) -> sap.ui.layout.BlockLayoutCell","parameters":{"sTitleAlignment":"type: sap.ui.core.HorizontalAlign, description: New value for property <code>titleAlignment<\/code>"}},"destroyContent":{"!description":"Destroys all the content in the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.BlockLayoutCell"}},"sap.ui.layout.BlockLayout":{"!description":"The BlockLayout is used to display several objects in a section-based manner. It features horizontal and vertical subdivisions, and full-width banners seen frequently in contemporary web design. Background colors are attached directly to these \u201cblocks\u201d of the layout. Special full-width sections of the BlockLayout allow horizontal scrolling through a set of blocks.\nExample use cases are SAP HANA Cloud Integration and the SAPUI5 Demo Kit. In SAP HANA Cloud Integration the BlockLayout serves as a banner-like presentation of illustrative icons with associated text. By placing pictorial and textual elements side by side in different blocks, a relation of content is established. In the SAPUI5 Demo Kit the BlockLayout serves as a flexible container for diverging content, such as headings, explanatory texts, code snippets, remarks, and examples.\nThe BlockLayout comes in three types: Layout only (default), Bright, and Mixed background colors.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.BlockLayout.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.layout.BlockLayoutRow<\/code> in the aggregation <code>content<\/code>.\rand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.layout.BlockLayoutRow) -> Number","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutRow, description: The content whose index is looked for"}},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\r\rThe Rows to be included in the content of the control","!static":false,"!category":"function","!type":"fn() -> [sap.ui.layout.BlockLayoutRow]"},"!proto":"sap.ui.core.Control","removeAllContent":{"!description":"Removes all the controls from the aggregation <code>content<\/code>.\r\rAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.layout.BlockLayoutRow]"},"!category":"class","addContent":{"!description":"Adds some content to the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.layout.BlockLayoutRow) -> sap.ui.layout.BlockLayout","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutRow, description: the content to add; if empty, nothing is inserted"}},"removeContent":{"!description":"Removes a content from the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.layout.BlockLayoutRow) -> sap.ui.layout.BlockLayoutRow","parameters":{"vContent":"type: int|string|sap.ui.layout.BlockLayoutRow, description: The content to remove or its index or id"}},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayout with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new BlockLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getBackground background} : sap.ui.layout.BlockBackgroundType (default: Default)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.layout.BlockLayoutRow[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/BlockLayout","!helpDescription":"The BlockLayout is used to display several objects in a section-based manner. It features horizontal and vertical subdivisions, and full-width banners seen frequently in contemporary web design. Background colors are attached directly to these \u201cblocks\u201d of the layout. Special full-width sections of the BlockLayout allow horizontal scrolling through a set of blocks.\nExample use cases are SAP HANA Cloud Integration and the SAPUI5 Demo Kit. In SAP HANA Cloud Integration the BlockLayout serves as a banner-like presentation of illustrative icons with associated text. By placing pictorial and textual elements side by side in different blocks, a relation of content is established. In the SAPUI5 Demo Kit the BlockLayout serves as a flexible container for diverging content, such as headings, explanatory texts, code snippets, remarks, and examples.\nThe BlockLayout comes in three types: Layout only (default), Bright, and Mixed background colors.","insertContent":{"!description":"Inserts a content into the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.layout.BlockLayoutRow, iIndex: Number) -> sap.ui.layout.BlockLayout","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutRow, description: the content to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the content should be inserted at; for\r             a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value\r             greater than the current size of the aggregation, the content is inserted at\r             the last position"}},"getBackground":{"!description":"Gets current value of property <code>background<\/code>.\r\rDetermines the background used for the Layout\r\rDefault value is <code>Default<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.BlockBackgroundType"},"destroyContent":{"!description":"Destroys all the content in the aggregation <code>content<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.layout.BlockLayout"}},"sap.ui.layout.form.SimpleForm_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.SimpleForm with name <code>sClassName<\/code>\rand enriches it with the information contained in <code>oClassInfo<\/code>.\r\r<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.SimpleForm"},"sap.ui.layout":{"DynamicSideContent":"sap.ui.layout.DynamicSideContent_obj","sideContentVisibility":{"!description":"Determines on which breakpoints the side content is visible.","!category":"enum","!type":"sap.ui.layout.SideContentVisibility"},"SplitPane":"sap.ui.layout.SplitPane_obj","spanMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanM instead.<br>Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!category":"enum","!type":"Number"},"indentXL":{"!description":"Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".","!category":"enum","!type":"Number"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"minSize":{"!description":"Sets the minimum size of the splitter content in px.","!category":"enum","!type":"Number"},"GridSpan":"sap.ui.layout.GridSpan","BlockRowColorSets":"sap.ui.layout.BlockRowColorSets","height":{"!description":"The height of the control","!category":"enum","!type":"sap.ui.core.CSSSize"},"!description":"SAPUI5 library with layout controls.","equalSplit":{"!description":"Defines whether the control is in equal split mode. In this mode, the side and the main content\ntake 50:50 percent of the container on all screen sizes except for phone, where the main and\nside contents are switching visibility using the toggle method.","!category":"enum","!type":"Boolean"},"SplitterLayoutData":"sap.ui.layout.SplitterLayoutData_obj","margin":{"!description":"Prevents any margin of the element if set to false.","!category":"enum","!type":"Boolean"},"linebreakable":{"!description":"Shows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.","!category":"enum","!type":"Boolean"},"rowColorSet":{"!description":"Defines background type for that row.\nThere might be several rows with the same type","!category":"enum","!type":"sap.ui.layout.BlockRowColorSets"},"indentSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentS instead.<br>Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!category":"enum","!type":"Number"},"spanSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanS instead.<br>Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!category":"enum","!type":"Number"},"ResponsiveFlowLayout":"sap.ui.layout.ResponsiveFlowLayout_obj","spanXL":{"!description":"Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".","!category":"enum","!type":"Number"},"showMainContent":{"!description":"Determines whether the main content is visible or hidden.","!category":"enum","!type":"Boolean"},"visibleOnMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleM instead.<br>Deprecated. Defines if this Control is visible on Medium size screens.","!category":"enum","!type":"Boolean"},"showSideContent":{"!description":"Determines whether the side content is visible or hidden.","!category":"enum","!type":"Boolean"},"!module":"sap/ui/layout/library","size":{"!description":"Sets the size of the splitter content.","!category":"enum","!type":"sap.ui.core.CSSSize"},"titleLevel":{"!description":"Defines the aria level of the title\nThis information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.","!category":"enum","!type":"sap.ui.core.TitleLevel"},"GridIndent":"sap.ui.layout.GridIndent","BlockLayoutRow":"sap.ui.layout.BlockLayoutRow_obj","Grid":"sap.ui.layout.Grid_obj","indentMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentM instead.<br>Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!category":"enum","!type":"Number"},"visibleS":{"!description":"Defines if this Control is visible on small screens.","!category":"enum","!type":"Boolean"},"visibleOnLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleL instead.<br>Deprecated. Defines if this Control is visible on Large screens.","!category":"enum","!type":"Boolean"},"enabled":{"!description":"If not enabled, all controls inside are not enabled automatically.","!category":"enum","!type":"Boolean"},"HorizontalLayout":"sap.ui.layout.HorizontalLayout_obj","FixFlex":"sap.ui.layout.FixFlex_obj","VerticalLayout":"sap.ui.layout.VerticalLayout_obj","fixContentSize":{"!description":"Determines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.","!category":"enum","!type":"sap.ui.core.CSSSize"},"scrollable":{"!description":"Sets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get\naligned side by side, with horizontal scroll bar for the row.","!category":"enum","!type":"Boolean"},"sideContentFallDown":{"!description":"Determines on which breakpoints the side content falls down below the main content.","!category":"enum","!type":"sap.ui.layout.SideContentFallDown"},"resizable":{"!description":"Determines whether the control in the splitter can be resized or not.","!category":"enum","!type":"Boolean"},"titleAlignment":{"!description":"Defines the alignment of the cell title","!category":"enum","!type":"sap.ui.core.HorizontalAlign"},"ResponsiveFlowLayoutData":"sap.ui.layout.ResponsiveFlowLayoutData_obj","minWidth":{"!description":"Defines the minimal size in px of an ResponsiveFlowLayout element. The element will be shrunk down to this value.","!category":"enum","!type":"Number"},"fixFirst":{"!description":"Determines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or beginning/bottom ( if the value is \"false\").","!category":"enum","!type":"Boolean"},"SideContentVisibility":"sap.ui.layout.SideContentVisibility","linebreakL":{"!description":"Optional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.","!category":"enum","!type":"Boolean"},"visibleL":{"!description":"Defines if this Control is visible on Large screens.","!category":"enum","!type":"Boolean"},"linebreakM":{"!description":"Optional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.","!category":"enum","!type":"Boolean"},"visibleM":{"!description":"Defines if this Control is visible on Medium size screens.","!category":"enum","!type":"Boolean"},"width":{"!description":"Width of the <code>VerticalLayout<\/code>. If no width is set, the width of the content is used.\nIf the content of the layout has a larger width than the layout, it is cut off.\nThere is no scrolling inside the layout.","!category":"enum","!type":"sap.ui.core.CSSSize"},"hSpacing":{"!description":"Optional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.","!category":"enum","!type":"Number"},"visibleOnSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleS instead.<br>Deprecated. Defines if this Control is visible on small screens.","!category":"enum","!type":"Boolean"},"demandPane":{"!description":"Determines whether the pane will be moved to the pagination","!category":"enum","!type":"Boolean"},"linebreakS":{"!description":"Optional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.","!category":"enum","!type":"Boolean"},"span":{"!description":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!category":"enum","!type":"sap.ui.layout.GridSpan"},"requiredParentWidth":{"!description":"Determines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.","!category":"enum","!type":"Number"},"sideContentPosition":{"!description":"Determines whether the side content is on the left or on the right side of the main content.","!category":"enum","!type":"sap.ui.layout.SideContentPosition"},"SideContentFallDown":"sap.ui.layout.SideContentFallDown","allowWrapping":{"!description":"Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.","!category":"enum","!type":"Boolean"},"ResponsiveSplitter":"sap.ui.layout.ResponsiveSplitter_obj","linebreak":{"!description":"If this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.","!category":"enum","!type":"Boolean"},"BlockLayoutCell":"sap.ui.layout.BlockLayoutCell_obj","BackgroundDesign":"sap.ui.layout.BackgroundDesign","moveBackwards":{"!description":"Optional. Moves a cell backwards so many columns as specified.","!category":"enum","!type":"sap.ui.layout.GridIndent"},"spanLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanL instead.<br>Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!category":"enum","!type":"Number"},"visible":{"!description":"Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control","!category":"enum","!type":"Boolean"},"weight":{"!description":"Defines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.","!category":"enum","!type":"Number"},"PaneContainer":"sap.ui.layout.PaneContainer_obj","!helpDescription":"SAPUI5 library with layout controls.","background":{"!description":"Determines the background used for the Layout","!category":"enum","!type":"sap.ui.layout.BlockBackgroundType"},"minFlexSize":{"!description":"Enables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.","!category":"enum","!type":"Number"},"position":{"!description":"Optional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".","!category":"enum","!type":"sap.ui.layout.GridPosition"},"spanS":{"!description":"Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!category":"enum","!type":"Number"},"moveForward":{"!description":"Optional. Moves a cell forwards so many columns as specified.","!category":"enum","!type":"sap.ui.layout.GridIndent"},"indent":{"!description":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!category":"enum","!type":"sap.ui.layout.GridIndent"},"indentLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentL instead.<br>Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!category":"enum","!type":"Number"},"!category":"namespace","vertical":{"!description":"Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.","!category":"enum","!type":"Boolean"},"spanL":{"!description":"Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!category":"enum","!type":"Number"},"GridPosition":"sap.ui.layout.GridPosition","spanM":{"!description":"Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!category":"enum","!type":"Number"},"title":{"!description":"Defines the title of the cell","!category":"enum","!type":"String"},"BlockBackgroundType":"sap.ui.layout.BlockBackgroundType","defaultIndent":{"!description":"Optional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!category":"enum","!type":"sap.ui.layout.GridIndent"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to. All fields in a logical field group should share the same <code>fieldGroupId<\/code>.\nOnce a logical field group is left, the validateFieldGroup event is raised.\n\nSee {@link sap.ui.core.Control#attachValidateFieldGroup}.","!category":"enum","!type":"[String]"},"BlockLayout":"sap.ui.layout.BlockLayout_obj","SideContentPosition":"sap.ui.layout.SideContentPosition","defaultSpan":{"!description":"Optional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!category":"enum","!type":"sap.ui.layout.GridSpan"},"orientation":{"!description":"Whether to split the contents horizontally (default) or vertically.","!category":"enum","!type":"sap.ui.core.Orientation"},"Splitter":"sap.ui.layout.Splitter_obj","visibleXL":{"!description":"Defines if this Control is visible on XL - extra Large screens.","!category":"enum","!type":"Boolean"},"indentS":{"!description":"Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!category":"enum","!type":"Number"},"form":"sap.ui.layout.form","indentL":{"!description":"Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!category":"enum","!type":"Number"},"indentM":{"!description":"Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!category":"enum","!type":"Number"},"responsive":{"!description":"If set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.","!category":"enum","!type":"Boolean"},"GridData":"sap.ui.layout.GridData_obj","vSpacing":{"!description":"Optional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.","!category":"enum","!type":"Number"},"containerQuery":{"!description":"If true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).","!category":"enum","!type":"Boolean"},"linebreakXL":{"!description":"Optional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.","!category":"enum","!type":"Boolean"}}}}